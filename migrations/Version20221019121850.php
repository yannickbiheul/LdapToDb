<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20221019121850 extends AbstractMigration
{
    public function getDescription(): string
    {
        return '';
    }

    public function up(Schema $schema): void
    {
        // this up() migration is auto-generated, please modify it to your needs
        $this->addSql('DROP SEQUENCE sequences_value_seq CASCADE');
        $this->addSql('DROP SEQUENCE users_uid_seq CASCADE');
        $this->addSql('DROP SEQUENCE queue_item_id_seq CASCADE');
        $this->addSql('DROP SEQUENCE path_alias_id_seq CASCADE');
        $this->addSql('DROP SEQUENCE path_alias_revision_revision_id_seq CASCADE');
        $this->addSql('DROP SEQUENCE watchdog_wid_seq CASCADE');
        $this->addSql('DROP SEQUENCE file_managed_fid_seq CASCADE');
        $this->addSql('DROP SEQUENCE block_content_id_seq CASCADE');
        $this->addSql('DROP SEQUENCE block_content_revision_revision_id_seq CASCADE');
        $this->addSql('DROP SEQUENCE node_nid_seq CASCADE');
        $this->addSql('DROP SEQUENCE node_revision_vid_seq CASCADE');
        $this->addSql('DROP SEQUENCE comment_cid_seq CASCADE');
        $this->addSql('DROP SEQUENCE locales_source_lid_seq CASCADE');
        $this->addSql('DROP SEQUENCE locales_location_lid_seq CASCADE');
        $this->addSql('DROP SEQUENCE taxonomy_term_data_tid_seq CASCADE');
        $this->addSql('DROP SEQUENCE taxonomy_term_revision_revision_id_seq CASCADE');
        $this->addSql('DROP SEQUENCE menu_link_content_id_seq CASCADE');
        $this->addSql('DROP SEQUENCE menu_link_content_revision_revision_id_seq CASCADE');
        $this->addSql('DROP SEQUENCE shortcut_id_seq CASCADE');
        $this->addSql('DROP SEQUENCE menu_tree_mlid_seq CASCADE');
        $this->addSql('CREATE SEQUENCE pole_id_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE TABLE pole (id INT NOT NULL, nom VARCHAR(255) NOT NULL, PRIMARY KEY(id))');
        $this->addSql('DROP TABLE cache_menu');
        $this->addSql('DROP TABLE node_revision__comment');
        $this->addSql('DROP TABLE cache_entity');
        $this->addSql('DROP TABLE node_field_revision');
        $this->addSql('DROP TABLE shortcut_field_data');
        $this->addSql('DROP TABLE authmap');
        $this->addSql('DROP TABLE shortcut');
        $this->addSql('DROP TABLE user__roles');
        $this->addSql('DROP TABLE node__comment');
        $this->addSql('DROP TABLE config');
        $this->addSql('DROP TABLE node_revision__field_tags');
        $this->addSql('DROP TABLE shortcut_set_users');
        $this->addSql('DROP TABLE cache_toolbar');
        $this->addSql('DROP TABLE user__ldap_user_prov_entries');
        $this->addSql('DROP TABLE queue');
        $this->addSql('DROP TABLE key_value');
        $this->addSql('DROP TABLE cache_render');
        $this->addSql('DROP TABLE comment_field_data');
        $this->addSql('DROP TABLE menu_link_content_field_revision');
        $this->addSql('DROP TABLE batch');
        $this->addSql('DROP TABLE comment__comment_body');
        $this->addSql('DROP TABLE sequences');
        $this->addSql('DROP TABLE node__field_ville');
        $this->addSql('DROP TABLE watchdog');
        $this->addSql('DROP TABLE sessions');
        $this->addSql('DROP TABLE cachetags');
        $this->addSql('DROP TABLE comment');
        $this->addSql('DROP TABLE node_revision__field_departement');
        $this->addSql('DROP TABLE menu_link_content_data');
        $this->addSql('DROP TABLE cache_container');
        $this->addSql('DROP TABLE menu_link_content_revision');
        $this->addSql('DROP TABLE node_revision__field_image');
        $this->addSql('DROP TABLE users_data');
        $this->addSql('DROP TABLE node_revision__field_nom');
        $this->addSql('DROP TABLE search_dataset');
        $this->addSql('DROP TABLE comment_entity_statistics');
        $this->addSql('DROP TABLE key_value_expire');
        $this->addSql('DROP TABLE node__field_departement');
        $this->addSql('DROP TABLE menu_link_content');
        $this->addSql('DROP TABLE search_index');
        $this->addSql('DROP TABLE cache_dynamic_page_cache');
        $this->addSql('DROP TABLE file_managed');
        $this->addSql('DROP TABLE users');
        $this->addSql('DROP TABLE taxonomy_term_revision__parent');
        $this->addSql('DROP TABLE search_total');
        $this->addSql('DROP TABLE user__user_picture');
        $this->addSql('DROP TABLE block_content');
        $this->addSql('DROP TABLE semaphore');
        $this->addSql('DROP TABLE users_field_data');
        $this->addSql('DROP TABLE node__body');
        $this->addSql('DROP TABLE taxonomy_term__parent');
        $this->addSql('DROP TABLE path_alias');
        $this->addSql('DROP TABLE path_alias_revision');
        $this->addSql('DROP TABLE cache_data');
        $this->addSql('DROP TABLE locales_source');
        $this->addSql('DROP TABLE taxonomy_index');
        $this->addSql('DROP TABLE node_revision__field_ville');
        $this->addSql('DROP TABLE node__field_image');
        $this->addSql('DROP TABLE block_content__body');
        $this->addSql('DROP TABLE cache_page');
        $this->addSql('DROP TABLE node_revision__body');
        $this->addSql('DROP TABLE taxonomy_term_field_revision');
        $this->addSql('DROP TABLE cache_rest');
        $this->addSql('DROP TABLE node_field_data');
        $this->addSql('DROP TABLE taxonomy_term_field_data');
        $this->addSql('DROP TABLE node_revision__field_numero');
        $this->addSql('DROP TABLE taxonomy_term_revision');
        $this->addSql('DROP TABLE block_content_revision__body');
        $this->addSql('DROP TABLE node__field_tags');
        $this->addSql('DROP TABLE block_content_revision');
        $this->addSql('DROP TABLE cache_config');
        $this->addSql('DROP TABLE taxonomy_term_data');
        $this->addSql('DROP TABLE cache_discovery');
        $this->addSql('DROP TABLE history');
        $this->addSql('DROP TABLE file_usage');
        $this->addSql('DROP TABLE block_content_field_revision');
        $this->addSql('DROP TABLE node_access');
        $this->addSql('DROP TABLE cache_bootstrap');
        $this->addSql('DROP TABLE node_revision');
        $this->addSql('DROP TABLE locale_file');
        $this->addSql('DROP TABLE node__field_numero');
        $this->addSql('DROP TABLE locales_location');
        $this->addSql('DROP TABLE menu_tree');
        $this->addSql('DROP TABLE cache_default');
        $this->addSql('DROP TABLE node');
        $this->addSql('DROP TABLE router');
        $this->addSql('DROP TABLE block_content_field_data');
        $this->addSql('DROP TABLE locales_target');
        $this->addSql('DROP TABLE node__field_nom');
    }

    public function down(Schema $schema): void
    {
        // this down() migration is auto-generated, please modify it to your needs
        $this->addSql('CREATE SCHEMA public');
        $this->addSql('DROP SEQUENCE pole_id_seq CASCADE');
        $this->addSql('CREATE SEQUENCE sequences_value_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE users_uid_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE queue_item_id_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE path_alias_id_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE path_alias_revision_revision_id_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE watchdog_wid_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE file_managed_fid_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE block_content_id_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE block_content_revision_revision_id_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE node_nid_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE node_revision_vid_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE comment_cid_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE locales_source_lid_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE locales_location_lid_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE taxonomy_term_data_tid_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE taxonomy_term_revision_revision_id_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE menu_link_content_id_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE menu_link_content_revision_revision_id_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE shortcut_id_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE SEQUENCE menu_tree_mlid_seq INCREMENT BY 1 MINVALUE 1 START 1');
        $this->addSql('CREATE TABLE cache_menu (cid VARCHAR(255) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, expire INT DEFAULT 0 NOT NULL, created NUMERIC(14, 3) DEFAULT \'0\' NOT NULL, serialized SMALLINT DEFAULT 0 NOT NULL, tags TEXT DEFAULT NULL, checksum VARCHAR(255) NOT NULL, PRIMARY KEY(cid))');
        $this->addSql('CREATE INDEX cache_menu__created__idx ON cache_menu (created)');
        $this->addSql('CREATE INDEX cache_menu__expire__idx ON cache_menu (expire)');
        $this->addSql('COMMENT ON TABLE cache_menu IS \'Storage for the cache API.\'');
        $this->addSql('COMMENT ON COLUMN cache_menu.cid IS \'Primary Key: Unique cache ID.\'');
        $this->addSql('COMMENT ON COLUMN cache_menu.data IS \'A collection of data to cache.\'');
        $this->addSql('COMMENT ON COLUMN cache_menu.expire IS \'A Unix timestamp indicating when the cache entry should expire, or -1 for never.\'');
        $this->addSql('COMMENT ON COLUMN cache_menu.created IS \'A timestamp with millisecond precision indicating when the cache entry was created.\'');
        $this->addSql('COMMENT ON COLUMN cache_menu.serialized IS \'A flag to indicate whether content is serialized (1) or not (0).\'');
        $this->addSql('COMMENT ON COLUMN cache_menu.tags IS \'Space-separated list of cache tags for this entry.\'');
        $this->addSql('COMMENT ON COLUMN cache_menu.checksum IS \'The tag invalidation checksum when this entry was saved.\'');
        $this->addSql('CREATE TABLE node_revision__comment (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, revision_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, comment_status INT DEFAULT 0 NOT NULL, PRIMARY KEY(entity_id, revision_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX node_revision__comment__revision_id__idx ON node_revision__comment (revision_id)');
        $this->addSql('CREATE INDEX node_revision__comment__bundle__idx ON node_revision__comment (bundle)');
        $this->addSql('COMMENT ON TABLE node_revision__comment IS \'Revision archive storage for node field comment.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__comment.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node_revision__comment.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__comment.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__comment.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__comment.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node_revision__comment.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN node_revision__comment.comment_status IS \'Whether comments are allowed on this entity: 0 = no, 1 = closed (read only), 2 = open (read/write).\'');
        $this->addSql('CREATE TABLE cache_entity (cid VARCHAR(255) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, expire INT DEFAULT 0 NOT NULL, created NUMERIC(14, 3) DEFAULT \'0\' NOT NULL, serialized SMALLINT DEFAULT 0 NOT NULL, tags TEXT DEFAULT NULL, checksum VARCHAR(255) NOT NULL, PRIMARY KEY(cid))');
        $this->addSql('CREATE INDEX cache_entity__created__idx ON cache_entity (created)');
        $this->addSql('CREATE INDEX cache_entity__expire__idx ON cache_entity (expire)');
        $this->addSql('COMMENT ON TABLE cache_entity IS \'Storage for the cache API.\'');
        $this->addSql('COMMENT ON COLUMN cache_entity.cid IS \'Primary Key: Unique cache ID.\'');
        $this->addSql('COMMENT ON COLUMN cache_entity.data IS \'A collection of data to cache.\'');
        $this->addSql('COMMENT ON COLUMN cache_entity.expire IS \'A Unix timestamp indicating when the cache entry should expire, or -1 for never.\'');
        $this->addSql('COMMENT ON COLUMN cache_entity.created IS \'A timestamp with millisecond precision indicating when the cache entry was created.\'');
        $this->addSql('COMMENT ON COLUMN cache_entity.serialized IS \'A flag to indicate whether content is serialized (1) or not (0).\'');
        $this->addSql('COMMENT ON COLUMN cache_entity.tags IS \'Space-separated list of cache tags for this entry.\'');
        $this->addSql('COMMENT ON COLUMN cache_entity.checksum IS \'The tag invalidation checksum when this entry was saved.\'');
        $this->addSql('CREATE TABLE node_field_revision (vid BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, nid BIGINT NOT NULL, status SMALLINT NOT NULL, uid BIGINT NOT NULL, title VARCHAR(255) DEFAULT NULL, created INT DEFAULT NULL, changed INT DEFAULT NULL, promote SMALLINT DEFAULT NULL, sticky SMALLINT DEFAULT NULL, default_langcode SMALLINT NOT NULL, revision_translation_affected SMALLINT DEFAULT NULL, PRIMARY KEY(vid, langcode))');
        $this->addSql('CREATE INDEX node_field_revision__node_field__uid__target_id__idx ON node_field_revision (uid)');
        $this->addSql('CREATE INDEX node_field_revision__node__id__default_langcode__langcode__idx ON node_field_revision (nid, default_langcode, langcode)');
        $this->addSql('COMMENT ON TABLE node_field_revision IS \'The revision data table for node entities.\'');
        $this->addSql('COMMENT ON COLUMN node_field_revision.uid IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE shortcut_field_data (id BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, shortcut_set VARCHAR(32) NOT NULL, title VARCHAR(255) DEFAULT NULL, weight INT DEFAULT NULL, link__uri VARCHAR(2048) DEFAULT NULL, link__title VARCHAR(255) DEFAULT NULL, link__options BYTEA DEFAULT NULL, default_langcode SMALLINT NOT NULL, PRIMARY KEY(id, langcode))');
        $this->addSql('CREATE INDEX "drupal_ZRb0RrR9ucQ_abrsOj5OqJZ6JHhecUX6qMxhEeLHDSA_idx" ON shortcut_field_data (shortcut_set)');
        $this->addSql('CREATE INDEX "drupal_yYznZkp1jjRq3ZidRMkkkawuQCmql0kdszvKsIMeEkU_idx" ON shortcut_field_data (id, default_langcode, langcode)');
        $this->addSql('COMMENT ON TABLE shortcut_field_data IS \'The data table for shortcut entities.\'');
        $this->addSql('COMMENT ON COLUMN shortcut_field_data.shortcut_set IS \'The ID of the target entity.\'');
        $this->addSql('COMMENT ON COLUMN shortcut_field_data.link__uri IS \'The URI of the link.\'');
        $this->addSql('COMMENT ON COLUMN shortcut_field_data.link__title IS \'The link text.\'');
        $this->addSql('COMMENT ON COLUMN shortcut_field_data.link__options IS \'Serialized array of options for the link.\'');
        $this->addSql('CREATE TABLE authmap (uid BIGINT DEFAULT 0 NOT NULL, provider VARCHAR(128) DEFAULT \'\' NOT NULL, authname VARCHAR(128) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, PRIMARY KEY(uid, provider))');
        $this->addSql('CREATE INDEX authmap__uid__idx ON authmap (uid)');
        $this->addSql('CREATE UNIQUE INDEX authmap__authname_provider__key ON authmap (authname, provider)');
        $this->addSql('COMMENT ON TABLE authmap IS \'Stores distributed authentication mapping.\'');
        $this->addSql('COMMENT ON COLUMN authmap.uid IS \'Primary key: "users".uid for user.\'');
        $this->addSql('COMMENT ON COLUMN authmap.provider IS \'The name of the authentication provider providing the authname\'');
        $this->addSql('COMMENT ON COLUMN authmap.authname IS \'Unique authentication name provided by authentication provider\'');
        $this->addSql('COMMENT ON COLUMN authmap.data IS \'Extra (serialized) data to store with the authname.\'');
        $this->addSql('CREATE TABLE shortcut (id SERIAL NOT NULL, shortcut_set VARCHAR(32) NOT NULL, uuid VARCHAR(128) NOT NULL, langcode VARCHAR(12) NOT NULL, PRIMARY KEY(id))');
        $this->addSql('CREATE INDEX shortcut__shortcut_field__shortcut_set__target_id__idx ON shortcut (shortcut_set)');
        $this->addSql('CREATE UNIQUE INDEX shortcut__shortcut_field__uuid__value__key ON shortcut (uuid)');
        $this->addSql('COMMENT ON TABLE shortcut IS \'The base table for shortcut entities.\'');
        $this->addSql('COMMENT ON COLUMN shortcut.shortcut_set IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE user__roles (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, revision_id BIGINT NOT NULL, roles_target_id VARCHAR(255) NOT NULL, PRIMARY KEY(entity_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX user__roles__roles_target_id__idx ON user__roles (roles_target_id)');
        $this->addSql('CREATE INDEX user__roles__revision_id__idx ON user__roles (revision_id)');
        $this->addSql('CREATE INDEX user__roles__bundle__idx ON user__roles (bundle)');
        $this->addSql('COMMENT ON TABLE user__roles IS \'Data storage for user field roles.\'');
        $this->addSql('COMMENT ON COLUMN user__roles.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN user__roles.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN user__roles.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN user__roles.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN user__roles.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN user__roles.revision_id IS \'The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id\'');
        $this->addSql('COMMENT ON COLUMN user__roles.roles_target_id IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE node__comment (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, revision_id BIGINT NOT NULL, comment_status INT DEFAULT 0 NOT NULL, PRIMARY KEY(entity_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX node__comment__revision_id__idx ON node__comment (revision_id)');
        $this->addSql('CREATE INDEX node__comment__bundle__idx ON node__comment (bundle)');
        $this->addSql('COMMENT ON TABLE node__comment IS \'Data storage for node field comment.\'');
        $this->addSql('COMMENT ON COLUMN node__comment.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node__comment.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node__comment.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node__comment.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node__comment.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN node__comment.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node__comment.comment_status IS \'Whether comments are allowed on this entity: 0 = no, 1 = closed (read only), 2 = open (read/write).\'');
        $this->addSql('CREATE TABLE config (collection VARCHAR(255) DEFAULT \'\' NOT NULL, name VARCHAR(255) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, PRIMARY KEY(collection, name))');
        $this->addSql('COMMENT ON TABLE config IS \'The base table for configuration data.\'');
        $this->addSql('COMMENT ON COLUMN config.collection IS \'Primary Key: Config object collection.\'');
        $this->addSql('COMMENT ON COLUMN config.name IS \'Primary Key: Config object name.\'');
        $this->addSql('COMMENT ON COLUMN config.data IS \'A serialized configuration object data.\'');
        $this->addSql('CREATE TABLE node_revision__field_tags (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, revision_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, field_tags_target_id BIGINT NOT NULL, PRIMARY KEY(entity_id, revision_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX node_revision__field_tags__field_tags_target_id__idx ON node_revision__field_tags (field_tags_target_id)');
        $this->addSql('CREATE INDEX node_revision__field_tags__revision_id__idx ON node_revision__field_tags (revision_id)');
        $this->addSql('CREATE INDEX node_revision__field_tags__bundle__idx ON node_revision__field_tags (bundle)');
        $this->addSql('COMMENT ON TABLE node_revision__field_tags IS \'Revision archive storage for node field field_tags.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_tags.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_tags.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_tags.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_tags.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_tags.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_tags.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_tags.field_tags_target_id IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE shortcut_set_users (uid BIGINT DEFAULT 0 NOT NULL, set_name VARCHAR(32) DEFAULT \'\' NOT NULL, PRIMARY KEY(uid))');
        $this->addSql('CREATE INDEX shortcut_set_users__set_name__idx ON shortcut_set_users (set_name)');
        $this->addSql('COMMENT ON TABLE shortcut_set_users IS \'Maps users to shortcut sets.\'');
        $this->addSql('COMMENT ON COLUMN shortcut_set_users.uid IS \'The "users".uid for this set.\'');
        $this->addSql('COMMENT ON COLUMN shortcut_set_users.set_name IS \'The "shortcut_set".set_name that will be displayed for this user.\'');
        $this->addSql('CREATE TABLE cache_toolbar (cid VARCHAR(255) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, expire INT DEFAULT 0 NOT NULL, created NUMERIC(14, 3) DEFAULT \'0\' NOT NULL, serialized SMALLINT DEFAULT 0 NOT NULL, tags TEXT DEFAULT NULL, checksum VARCHAR(255) NOT NULL, PRIMARY KEY(cid))');
        $this->addSql('CREATE INDEX cache_toolbar__created__idx ON cache_toolbar (created)');
        $this->addSql('CREATE INDEX cache_toolbar__expire__idx ON cache_toolbar (expire)');
        $this->addSql('COMMENT ON TABLE cache_toolbar IS \'Storage for the cache API.\'');
        $this->addSql('COMMENT ON COLUMN cache_toolbar.cid IS \'Primary Key: Unique cache ID.\'');
        $this->addSql('COMMENT ON COLUMN cache_toolbar.data IS \'A collection of data to cache.\'');
        $this->addSql('COMMENT ON COLUMN cache_toolbar.expire IS \'A Unix timestamp indicating when the cache entry should expire, or -1 for never.\'');
        $this->addSql('COMMENT ON COLUMN cache_toolbar.created IS \'A timestamp with millisecond precision indicating when the cache entry was created.\'');
        $this->addSql('COMMENT ON COLUMN cache_toolbar.serialized IS \'A flag to indicate whether content is serialized (1) or not (0).\'');
        $this->addSql('COMMENT ON COLUMN cache_toolbar.tags IS \'Space-separated list of cache tags for this entry.\'');
        $this->addSql('COMMENT ON COLUMN cache_toolbar.checksum IS \'The tag invalidation checksum when this entry was saved.\'');
        $this->addSql('CREATE TABLE user__ldap_user_prov_entries (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, revision_id BIGINT NOT NULL, ldap_user_prov_entries_value VARCHAR(255) NOT NULL, PRIMARY KEY(entity_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX user__ldap_user_prov_entries__revision_id__idx ON user__ldap_user_prov_entries (revision_id)');
        $this->addSql('CREATE INDEX user__ldap_user_prov_entries__bundle__idx ON user__ldap_user_prov_entries (bundle)');
        $this->addSql('COMMENT ON TABLE user__ldap_user_prov_entries IS \'Data storage for user field ldap_user_prov_entries.\'');
        $this->addSql('COMMENT ON COLUMN user__ldap_user_prov_entries.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN user__ldap_user_prov_entries.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN user__ldap_user_prov_entries.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN user__ldap_user_prov_entries.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN user__ldap_user_prov_entries.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN user__ldap_user_prov_entries.revision_id IS \'The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id\'');
        $this->addSql('CREATE TABLE queue (item_id SERIAL NOT NULL, name VARCHAR(255) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, expire INT DEFAULT 0 NOT NULL, created INT DEFAULT 0 NOT NULL, PRIMARY KEY(item_id))');
        $this->addSql('CREATE INDEX queue__expire__idx ON queue (expire)');
        $this->addSql('CREATE INDEX queue__name_created__idx ON queue (name, created)');
        $this->addSql('COMMENT ON TABLE queue IS \'Stores items in queues.\'');
        $this->addSql('COMMENT ON COLUMN queue.item_id IS \'Primary Key: Unique item ID.\'');
        $this->addSql('COMMENT ON COLUMN queue.name IS \'The queue name.\'');
        $this->addSql('COMMENT ON COLUMN queue.data IS \'The arbitrary data for the item.\'');
        $this->addSql('COMMENT ON COLUMN queue.expire IS \'Timestamp when the claim lease expires on the item.\'');
        $this->addSql('COMMENT ON COLUMN queue.created IS \'Timestamp when the item was created.\'');
        $this->addSql('CREATE TABLE key_value (collection VARCHAR(128) DEFAULT \'\' NOT NULL, name VARCHAR(128) DEFAULT \'\' NOT NULL, value BYTEA NOT NULL, PRIMARY KEY(collection, name))');
        $this->addSql('COMMENT ON TABLE key_value IS \'Generic key-value storage table. See the state system for an example.\'');
        $this->addSql('COMMENT ON COLUMN key_value.collection IS \'A named collection of key and value pairs.\'');
        $this->addSql('COMMENT ON COLUMN key_value.name IS \'The key of the key-value pair. As KEY is a SQL reserved keyword, name was chosen instead.\'');
        $this->addSql('COMMENT ON COLUMN key_value.value IS \'The value.\'');
        $this->addSql('CREATE TABLE cache_render (cid VARCHAR(255) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, expire INT DEFAULT 0 NOT NULL, created NUMERIC(14, 3) DEFAULT \'0\' NOT NULL, serialized SMALLINT DEFAULT 0 NOT NULL, tags TEXT DEFAULT NULL, checksum VARCHAR(255) NOT NULL, PRIMARY KEY(cid))');
        $this->addSql('CREATE INDEX cache_render__created__idx ON cache_render (created)');
        $this->addSql('CREATE INDEX cache_render__expire__idx ON cache_render (expire)');
        $this->addSql('COMMENT ON TABLE cache_render IS \'Storage for the cache API.\'');
        $this->addSql('COMMENT ON COLUMN cache_render.cid IS \'Primary Key: Unique cache ID.\'');
        $this->addSql('COMMENT ON COLUMN cache_render.data IS \'A collection of data to cache.\'');
        $this->addSql('COMMENT ON COLUMN cache_render.expire IS \'A Unix timestamp indicating when the cache entry should expire, or -1 for never.\'');
        $this->addSql('COMMENT ON COLUMN cache_render.created IS \'A timestamp with millisecond precision indicating when the cache entry was created.\'');
        $this->addSql('COMMENT ON COLUMN cache_render.serialized IS \'A flag to indicate whether content is serialized (1) or not (0).\'');
        $this->addSql('COMMENT ON COLUMN cache_render.tags IS \'Space-separated list of cache tags for this entry.\'');
        $this->addSql('COMMENT ON COLUMN cache_render.checksum IS \'The tag invalidation checksum when this entry was saved.\'');
        $this->addSql('CREATE TABLE comment_field_data (cid BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, comment_type VARCHAR(32) NOT NULL, status SMALLINT NOT NULL, uid BIGINT NOT NULL, pid BIGINT DEFAULT NULL, entity_id BIGINT DEFAULT NULL, subject VARCHAR(64) DEFAULT NULL, name VARCHAR(60) DEFAULT NULL, mail VARCHAR(254) DEFAULT NULL, homepage VARCHAR(255) DEFAULT NULL, hostname VARCHAR(128) DEFAULT NULL, created INT NOT NULL, changed INT DEFAULT NULL, thread VARCHAR(255) NOT NULL, entity_type VARCHAR(32) NOT NULL, field_name VARCHAR(32) NOT NULL, default_langcode SMALLINT NOT NULL, PRIMARY KEY(cid, langcode))');
        $this->addSql('CREATE INDEX comment_field_data__comment__entity_langcode__idx ON comment_field_data (entity_id, entity_type, comment_type, default_langcode)');
        $this->addSql('CREATE INDEX comment_field_data__comment__num_new__idx ON comment_field_data (entity_id, entity_type, comment_type, status, created, cid, thread)');
        $this->addSql('CREATE INDEX comment_field_data__comment__status_pid__idx ON comment_field_data (pid, status)');
        $this->addSql('CREATE INDEX comment_field_data__comment__status_comment_type__idx ON comment_field_data (status, comment_type, cid)');
        $this->addSql('CREATE INDEX comment_field_data__comment_field__created__idx ON comment_field_data (created)');
        $this->addSql('CREATE INDEX comment_field_data__comment_field__uid__target_id__idx ON comment_field_data (uid)');
        $this->addSql('CREATE INDEX comment_field_data__comment_field__comment_type__target_id__idx ON comment_field_data (comment_type)');
        $this->addSql('CREATE INDEX "drupal_mOML8Q1mOpUaN8EQHtn4pIFZ9wK8gamkAI1iyADLZZ8_idx" ON comment_field_data (cid, default_langcode, langcode)');
        $this->addSql('COMMENT ON TABLE comment_field_data IS \'The data table for comment entities.\'');
        $this->addSql('COMMENT ON COLUMN comment_field_data.comment_type IS \'The ID of the target entity.\'');
        $this->addSql('COMMENT ON COLUMN comment_field_data.uid IS \'The ID of the target entity.\'');
        $this->addSql('COMMENT ON COLUMN comment_field_data.pid IS \'The ID of the target entity.\'');
        $this->addSql('COMMENT ON COLUMN comment_field_data.entity_id IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE menu_link_content_field_revision (revision_id BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, id BIGINT NOT NULL, enabled SMALLINT NOT NULL, title VARCHAR(255) DEFAULT NULL, description VARCHAR(255) DEFAULT NULL, link__uri VARCHAR(2048) DEFAULT NULL, link__title VARCHAR(255) DEFAULT NULL, link__options BYTEA DEFAULT NULL, external SMALLINT DEFAULT NULL, changed INT DEFAULT NULL, default_langcode SMALLINT NOT NULL, revision_translation_affected SMALLINT DEFAULT NULL, PRIMARY KEY(revision_id, langcode))');
        $this->addSql('CREATE INDEX "drupal_L0k0k_zy6SEDoKs_R8suuvxbkHf_hZzMpkX6r42vlFg_idx" ON menu_link_content_field_revision (id, default_langcode, langcode)');
        $this->addSql('COMMENT ON TABLE menu_link_content_field_revision IS \'The revision data table for menu_link_content entities.\'');
        $this->addSql('COMMENT ON COLUMN menu_link_content_field_revision.link__uri IS \'The URI of the link.\'');
        $this->addSql('COMMENT ON COLUMN menu_link_content_field_revision.link__title IS \'The link text.\'');
        $this->addSql('COMMENT ON COLUMN menu_link_content_field_revision.link__options IS \'Serialized array of options for the link.\'');
        $this->addSql('CREATE TABLE batch (bid BIGINT NOT NULL, token VARCHAR(64) NOT NULL, "timestamp" INT NOT NULL, batch BYTEA DEFAULT NULL, PRIMARY KEY(bid))');
        $this->addSql('CREATE INDEX batch__token__idx ON batch (token)');
        $this->addSql('COMMENT ON TABLE batch IS \'Stores details about batches (processes that run in multiple HTTP requests).\'');
        $this->addSql('COMMENT ON COLUMN batch.bid IS \'Primary Key: Unique batch ID.\'');
        $this->addSql('COMMENT ON COLUMN batch.token IS \'A string token generated against the current user\'\'s session id and the batch id, used to ensure that only the user who submitted the batch can effectively access it.\'');
        $this->addSql('COMMENT ON COLUMN batch."timestamp" IS \'A Unix timestamp indicating when this batch was submitted for processing. Stale batches are purged at cron time.\'');
        $this->addSql('COMMENT ON COLUMN batch.batch IS \'A serialized array containing the processing data for the batch.\'');
        $this->addSql('CREATE TABLE comment__comment_body (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, revision_id BIGINT NOT NULL, comment_body_value TEXT NOT NULL, comment_body_format VARCHAR(255) DEFAULT NULL, PRIMARY KEY(entity_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX comment__comment_body__comment_body_format__idx ON comment__comment_body (comment_body_format)');
        $this->addSql('CREATE INDEX comment__comment_body__revision_id__idx ON comment__comment_body (revision_id)');
        $this->addSql('CREATE INDEX comment__comment_body__bundle__idx ON comment__comment_body (bundle)');
        $this->addSql('COMMENT ON TABLE comment__comment_body IS \'Data storage for comment field comment_body.\'');
        $this->addSql('COMMENT ON COLUMN comment__comment_body.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN comment__comment_body.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN comment__comment_body.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN comment__comment_body.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN comment__comment_body.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN comment__comment_body.revision_id IS \'The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id\'');
        $this->addSql('CREATE TABLE sequences (value SERIAL NOT NULL, PRIMARY KEY(value))');
        $this->addSql('COMMENT ON TABLE sequences IS \'Stores IDs.\'');
        $this->addSql('COMMENT ON COLUMN sequences.value IS \'The value of the sequence.\'');
        $this->addSql('CREATE TABLE node__field_ville (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, revision_id BIGINT NOT NULL, field_ville_value VARCHAR(255) NOT NULL, PRIMARY KEY(entity_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX node__field_ville__revision_id__idx ON node__field_ville (revision_id)');
        $this->addSql('CREATE INDEX node__field_ville__bundle__idx ON node__field_ville (bundle)');
        $this->addSql('COMMENT ON TABLE node__field_ville IS \'Data storage for node field field_ville.\'');
        $this->addSql('COMMENT ON COLUMN node__field_ville.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node__field_ville.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node__field_ville.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node__field_ville.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node__field_ville.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN node__field_ville.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('CREATE TABLE watchdog (wid SERIAL NOT NULL, uid BIGINT DEFAULT 0 NOT NULL, type VARCHAR(64) DEFAULT \'\' NOT NULL, message TEXT NOT NULL, variables BYTEA NOT NULL, severity INT DEFAULT 0 NOT NULL, link TEXT DEFAULT NULL, location TEXT NOT NULL, referer TEXT DEFAULT NULL, hostname VARCHAR(128) DEFAULT \'\' NOT NULL, "timestamp" INT DEFAULT 0 NOT NULL, PRIMARY KEY(wid))');
        $this->addSql('CREATE INDEX watchdog__severity__idx ON watchdog (severity)');
        $this->addSql('CREATE INDEX watchdog__uid__idx ON watchdog (uid)');
        $this->addSql('CREATE INDEX watchdog__type__idx ON watchdog (type)');
        $this->addSql('COMMENT ON TABLE watchdog IS \'Table that contains logs of all system events.\'');
        $this->addSql('COMMENT ON COLUMN watchdog.wid IS \'Primary Key: Unique watchdog event ID.\'');
        $this->addSql('COMMENT ON COLUMN watchdog.uid IS \'The "users".uid of the user who triggered the event.\'');
        $this->addSql('COMMENT ON COLUMN watchdog.type IS \'Type of log message, for example "user" or "page not found."\'');
        $this->addSql('COMMENT ON COLUMN watchdog.message IS \'Text of log message to be passed into the t() function.\'');
        $this->addSql('COMMENT ON COLUMN watchdog.variables IS \'Serialized array of variables that match the message string and that is passed into the t() function.\'');
        $this->addSql('COMMENT ON COLUMN watchdog.severity IS \'The severity level of the event. ranges from 0 (Emergency) to 7 (Debug)\'');
        $this->addSql('COMMENT ON COLUMN watchdog.link IS \'Link to view the result of the event.\'');
        $this->addSql('COMMENT ON COLUMN watchdog.location IS \'URL of the origin of the event.\'');
        $this->addSql('COMMENT ON COLUMN watchdog.referer IS \'URL of referring page.\'');
        $this->addSql('COMMENT ON COLUMN watchdog.hostname IS \'Hostname of the user who triggered the event.\'');
        $this->addSql('COMMENT ON COLUMN watchdog."timestamp" IS \'Unix timestamp of when event occurred.\'');
        $this->addSql('CREATE TABLE sessions (sid VARCHAR(128) NOT NULL, uid BIGINT NOT NULL, hostname VARCHAR(128) DEFAULT \'\' NOT NULL, "timestamp" INT DEFAULT 0 NOT NULL, session BYTEA DEFAULT NULL, PRIMARY KEY(sid))');
        $this->addSql('CREATE INDEX sessions__uid__idx ON sessions (uid)');
        $this->addSql('CREATE INDEX sessions__timestamp__idx ON sessions (timestamp)');
        $this->addSql('COMMENT ON TABLE sessions IS \'Drupal\'\'s session handlers read and write into the sessions table. Each record represents a user session, either anonymous or authenticated.\'');
        $this->addSql('COMMENT ON COLUMN sessions.sid IS \'A session ID (hashed). The value is generated by Drupal\'\'s session handlers.\'');
        $this->addSql('COMMENT ON COLUMN sessions.uid IS \'The "users".uid corresponding to a session, or 0 for anonymous user.\'');
        $this->addSql('COMMENT ON COLUMN sessions.hostname IS \'The IP address that last used this session ID (sid).\'');
        $this->addSql('COMMENT ON COLUMN sessions."timestamp" IS \'The Unix timestamp when this session last requested a page. Old records are purged by PHP automatically.\'');
        $this->addSql('COMMENT ON COLUMN sessions.session IS \'The serialized contents of the user\'\'s session, an array of name/value pairs that persists across page requests by this session ID. Drupal loads the user\'\'s session from here at the start of each request and saves it at the end.\'');
        $this->addSql('CREATE TABLE cachetags (tag VARCHAR(255) DEFAULT \'\' NOT NULL, invalidations INT DEFAULT 0 NOT NULL, PRIMARY KEY(tag))');
        $this->addSql('COMMENT ON TABLE cachetags IS \'Cache table for tracking cache tag invalidations.\'');
        $this->addSql('COMMENT ON COLUMN cachetags.tag IS \'Namespace-prefixed tag string.\'');
        $this->addSql('COMMENT ON COLUMN cachetags.invalidations IS \'Number incremented when the tag is invalidated.\'');
        $this->addSql('CREATE TABLE comment (cid SERIAL NOT NULL, comment_type VARCHAR(32) NOT NULL, uuid VARCHAR(128) NOT NULL, langcode VARCHAR(12) NOT NULL, PRIMARY KEY(cid))');
        $this->addSql('CREATE INDEX comment__comment_field__comment_type__target_id__idx ON comment (comment_type)');
        $this->addSql('CREATE UNIQUE INDEX comment__comment_field__uuid__value__key ON comment (uuid)');
        $this->addSql('COMMENT ON TABLE comment IS \'The base table for comment entities.\'');
        $this->addSql('COMMENT ON COLUMN comment.comment_type IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE node_revision__field_departement (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, revision_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, field_departement_target_id BIGINT NOT NULL, PRIMARY KEY(entity_id, revision_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX "drupal_vdLzKFu_qKpncahsD_MP_PNDklnJ5VKwre7uLFZnjJM_idx" ON node_revision__field_departement (field_departement_target_id)');
        $this->addSql('CREATE INDEX node_revision__field_departement__revision_id__idx ON node_revision__field_departement (revision_id)');
        $this->addSql('CREATE INDEX node_revision__field_departement__bundle__idx ON node_revision__field_departement (bundle)');
        $this->addSql('COMMENT ON TABLE node_revision__field_departement IS \'Revision archive storage for node field field_departement.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_departement.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_departement.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_departement.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_departement.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_departement.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_departement.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_departement.field_departement_target_id IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE menu_link_content_data (id BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, revision_id BIGINT NOT NULL, bundle VARCHAR(32) NOT NULL, enabled SMALLINT NOT NULL, title VARCHAR(255) DEFAULT NULL, description VARCHAR(255) DEFAULT NULL, menu_name VARCHAR(255) DEFAULT NULL, link__uri VARCHAR(2048) DEFAULT NULL, link__title VARCHAR(255) DEFAULT NULL, link__options BYTEA DEFAULT NULL, external SMALLINT DEFAULT NULL, rediscover SMALLINT DEFAULT NULL, weight INT DEFAULT NULL, expanded SMALLINT DEFAULT NULL, parent VARCHAR(255) DEFAULT NULL, changed INT DEFAULT NULL, default_langcode SMALLINT NOT NULL, revision_translation_affected SMALLINT DEFAULT NULL, PRIMARY KEY(id, langcode))');
        $this->addSql('CREATE INDEX menu_link_content_data__menu_link_content__enabled_bundle__idx ON menu_link_content_data (enabled, bundle, id)');
        $this->addSql('CREATE INDEX menu_link_content_data__menu_link_content__revision_id__idx ON menu_link_content_data (revision_id)');
        $this->addSql('CREATE INDEX "drupal_mtiYLSRDGoU4931oeZ9cDY50TtJYeSgNur4s_gNPxF8_idx" ON menu_link_content_data (id, default_langcode, langcode)');
        $this->addSql('COMMENT ON TABLE menu_link_content_data IS \'The data table for menu_link_content entities.\'');
        $this->addSql('COMMENT ON COLUMN menu_link_content_data.link__uri IS \'The URI of the link.\'');
        $this->addSql('COMMENT ON COLUMN menu_link_content_data.link__title IS \'The link text.\'');
        $this->addSql('COMMENT ON COLUMN menu_link_content_data.link__options IS \'Serialized array of options for the link.\'');
        $this->addSql('CREATE TABLE cache_container (cid VARCHAR(255) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, expire INT DEFAULT 0 NOT NULL, created NUMERIC(14, 3) DEFAULT \'0\' NOT NULL, serialized SMALLINT DEFAULT 0 NOT NULL, tags TEXT DEFAULT NULL, checksum VARCHAR(255) NOT NULL, PRIMARY KEY(cid))');
        $this->addSql('CREATE INDEX cache_container__created__idx ON cache_container (created)');
        $this->addSql('CREATE INDEX cache_container__expire__idx ON cache_container (expire)');
        $this->addSql('COMMENT ON TABLE cache_container IS \'Storage for the cache API.\'');
        $this->addSql('COMMENT ON COLUMN cache_container.cid IS \'Primary Key: Unique cache ID.\'');
        $this->addSql('COMMENT ON COLUMN cache_container.data IS \'A collection of data to cache.\'');
        $this->addSql('COMMENT ON COLUMN cache_container.expire IS \'A Unix timestamp indicating when the cache entry should expire, or -1 for never.\'');
        $this->addSql('COMMENT ON COLUMN cache_container.created IS \'A timestamp with millisecond precision indicating when the cache entry was created.\'');
        $this->addSql('COMMENT ON COLUMN cache_container.serialized IS \'A flag to indicate whether content is serialized (1) or not (0).\'');
        $this->addSql('COMMENT ON COLUMN cache_container.tags IS \'Space-separated list of cache tags for this entry.\'');
        $this->addSql('COMMENT ON COLUMN cache_container.checksum IS \'The tag invalidation checksum when this entry was saved.\'');
        $this->addSql('CREATE TABLE menu_link_content_revision (revision_id SERIAL NOT NULL, id BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, revision_user BIGINT DEFAULT NULL, revision_created INT DEFAULT NULL, revision_log_message TEXT DEFAULT NULL, revision_default SMALLINT DEFAULT NULL, PRIMARY KEY(revision_id))');
        $this->addSql('CREATE INDEX menu_link_content_revision__menu_link_content__ef029a1897__idx ON menu_link_content_revision (revision_user)');
        $this->addSql('CREATE INDEX menu_link_content_revision__menu_link_content__id__idx ON menu_link_content_revision (id)');
        $this->addSql('COMMENT ON TABLE menu_link_content_revision IS \'The revision table for menu_link_content entities.\'');
        $this->addSql('COMMENT ON COLUMN menu_link_content_revision.revision_user IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE node_revision__field_image (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, revision_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, field_image_target_id BIGINT NOT NULL, field_image_alt VARCHAR(512) DEFAULT NULL, field_image_title VARCHAR(1024) DEFAULT NULL, field_image_width BIGINT DEFAULT NULL, field_image_height BIGINT DEFAULT NULL, PRIMARY KEY(entity_id, revision_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX node_revision__field_image__field_image_target_id__idx ON node_revision__field_image (field_image_target_id)');
        $this->addSql('CREATE INDEX node_revision__field_image__revision_id__idx ON node_revision__field_image (revision_id)');
        $this->addSql('CREATE INDEX node_revision__field_image__bundle__idx ON node_revision__field_image (bundle)');
        $this->addSql('COMMENT ON TABLE node_revision__field_image IS \'Revision archive storage for node field field_image.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_image.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_image.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_image.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_image.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_image.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_image.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_image.field_image_target_id IS \'The ID of the file entity.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_image.field_image_alt IS \'Alternative image text, for the image\'\'s \'\'alt\'\' attribute.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_image.field_image_title IS \'Image title text, for the image\'\'s \'\'title\'\' attribute.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_image.field_image_width IS \'The width of the image in pixels.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_image.field_image_height IS \'The height of the image in pixels.\'');
        $this->addSql('CREATE TABLE users_data (uid BIGINT DEFAULT 0 NOT NULL, module VARCHAR(50) DEFAULT \'\' NOT NULL, name VARCHAR(128) DEFAULT \'\' NOT NULL, value BYTEA DEFAULT NULL, serialized INT DEFAULT 0, PRIMARY KEY(uid, module, name))');
        $this->addSql('CREATE INDEX users_data__name__idx ON users_data (name)');
        $this->addSql('CREATE INDEX users_data__module__idx ON users_data (module)');
        $this->addSql('COMMENT ON TABLE users_data IS \'Stores module data as key/value pairs per user.\'');
        $this->addSql('COMMENT ON COLUMN users_data.uid IS \'The "users".uid this record affects.\'');
        $this->addSql('COMMENT ON COLUMN users_data.module IS \'The name of the module declaring the variable.\'');
        $this->addSql('COMMENT ON COLUMN users_data.name IS \'The identifier of the data.\'');
        $this->addSql('COMMENT ON COLUMN users_data.value IS \'The value.\'');
        $this->addSql('COMMENT ON COLUMN users_data.serialized IS \'Whether value is serialized.\'');
        $this->addSql('CREATE TABLE node_revision__field_nom (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, revision_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, field_nom_value VARCHAR(255) NOT NULL, PRIMARY KEY(entity_id, revision_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX node_revision__field_nom__revision_id__idx ON node_revision__field_nom (revision_id)');
        $this->addSql('CREATE INDEX node_revision__field_nom__bundle__idx ON node_revision__field_nom (bundle)');
        $this->addSql('COMMENT ON TABLE node_revision__field_nom IS \'Revision archive storage for node field field_nom.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_nom.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_nom.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_nom.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_nom.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_nom.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_nom.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('CREATE TABLE search_dataset (sid BIGINT DEFAULT 0 NOT NULL, langcode VARCHAR(12) DEFAULT \'\' NOT NULL, type VARCHAR(64) NOT NULL, data TEXT NOT NULL, reindex BIGINT DEFAULT 0 NOT NULL, PRIMARY KEY(sid, langcode, type))');
        $this->addSql('COMMENT ON TABLE search_dataset IS \'Stores items that will be searched.\'');
        $this->addSql('COMMENT ON COLUMN search_dataset.sid IS \'Search item ID, e.g. node ID for nodes.\'');
        $this->addSql('COMMENT ON COLUMN search_dataset.langcode IS \'The "languages".langcode of the item variant.\'');
        $this->addSql('COMMENT ON COLUMN search_dataset.type IS \'Type of item, e.g. node.\'');
        $this->addSql('COMMENT ON COLUMN search_dataset.data IS \'List of space-separated words from the item.\'');
        $this->addSql('COMMENT ON COLUMN search_dataset.reindex IS \'Set to force node reindexing.\'');
        $this->addSql('CREATE TABLE comment_entity_statistics (entity_id BIGINT DEFAULT 0 NOT NULL, entity_type VARCHAR(32) DEFAULT \'node\' NOT NULL, field_name VARCHAR(32) DEFAULT \'\' NOT NULL, cid INT DEFAULT 0 NOT NULL, last_comment_timestamp INT DEFAULT 0 NOT NULL, last_comment_name VARCHAR(60) DEFAULT NULL, last_comment_uid BIGINT DEFAULT 0 NOT NULL, comment_count BIGINT DEFAULT 0 NOT NULL, PRIMARY KEY(entity_id, entity_type, field_name))');
        $this->addSql('CREATE INDEX comment_entity_statistics__last_comment_uid__idx ON comment_entity_statistics (last_comment_uid)');
        $this->addSql('CREATE INDEX comment_entity_statistics__comment_count__idx ON comment_entity_statistics (comment_count)');
        $this->addSql('CREATE INDEX comment_entity_statistics__last_comment_timestamp__idx ON comment_entity_statistics (last_comment_timestamp)');
        $this->addSql('COMMENT ON TABLE comment_entity_statistics IS \'Maintains statistics of entity and comments posts to show "new" and "updated" flags.\'');
        $this->addSql('COMMENT ON COLUMN comment_entity_statistics.entity_id IS \'The entity_id of the entity for which the statistics are compiled.\'');
        $this->addSql('COMMENT ON COLUMN comment_entity_statistics.entity_type IS \'The entity_type of the entity to which this comment is a reply.\'');
        $this->addSql('COMMENT ON COLUMN comment_entity_statistics.field_name IS \'The field_name of the field that was used to add this comment.\'');
        $this->addSql('COMMENT ON COLUMN comment_entity_statistics.cid IS \'The "comment".cid of the last comment.\'');
        $this->addSql('COMMENT ON COLUMN comment_entity_statistics.last_comment_timestamp IS \'The Unix timestamp of the last comment that was posted within this node, from "comment".changed.\'');
        $this->addSql('COMMENT ON COLUMN comment_entity_statistics.last_comment_name IS \'The name of the latest author to post a comment on this node, from "comment".name.\'');
        $this->addSql('COMMENT ON COLUMN comment_entity_statistics.last_comment_uid IS \'The user ID of the latest author to post a comment on this node, from "comment".uid.\'');
        $this->addSql('COMMENT ON COLUMN comment_entity_statistics.comment_count IS \'The total number of comments on this entity.\'');
        $this->addSql('CREATE TABLE key_value_expire (collection VARCHAR(128) DEFAULT \'\' NOT NULL, name VARCHAR(128) DEFAULT \'\' NOT NULL, value BYTEA NOT NULL, expire INT DEFAULT 2147483647 NOT NULL, PRIMARY KEY(collection, name))');
        $this->addSql('CREATE INDEX key_value_expire__expire__idx ON key_value_expire (expire)');
        $this->addSql('COMMENT ON TABLE key_value_expire IS \'Generic key/value storage table with an expiration.\'');
        $this->addSql('COMMENT ON COLUMN key_value_expire.collection IS \'A named collection of key and value pairs.\'');
        $this->addSql('COMMENT ON COLUMN key_value_expire.name IS \'The key of the key/value pair.\'');
        $this->addSql('COMMENT ON COLUMN key_value_expire.value IS \'The value of the key/value pair.\'');
        $this->addSql('COMMENT ON COLUMN key_value_expire.expire IS \'The time since Unix epoch in seconds when this item expires. Defaults to the maximum possible time.\'');
        $this->addSql('CREATE TABLE node__field_departement (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, revision_id BIGINT NOT NULL, field_departement_target_id BIGINT NOT NULL, PRIMARY KEY(entity_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX node__field_departement__field_departement_target_id__idx ON node__field_departement (field_departement_target_id)');
        $this->addSql('CREATE INDEX node__field_departement__revision_id__idx ON node__field_departement (revision_id)');
        $this->addSql('CREATE INDEX node__field_departement__bundle__idx ON node__field_departement (bundle)');
        $this->addSql('COMMENT ON TABLE node__field_departement IS \'Data storage for node field field_departement.\'');
        $this->addSql('COMMENT ON COLUMN node__field_departement.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node__field_departement.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node__field_departement.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node__field_departement.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node__field_departement.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN node__field_departement.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node__field_departement.field_departement_target_id IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE menu_link_content (id SERIAL NOT NULL, revision_id BIGINT DEFAULT NULL, bundle VARCHAR(32) NOT NULL, uuid VARCHAR(128) NOT NULL, langcode VARCHAR(12) NOT NULL, PRIMARY KEY(id))');
        $this->addSql('CREATE UNIQUE INDEX menu_link_content__menu_link_content_field__uuid__value__key ON menu_link_content (uuid)');
        $this->addSql('CREATE UNIQUE INDEX menu_link_content__menu_link_content__revision_id__key ON menu_link_content (revision_id)');
        $this->addSql('COMMENT ON TABLE menu_link_content IS \'The base table for menu_link_content entities.\'');
        $this->addSql('CREATE TABLE search_index (word VARCHAR(50) DEFAULT \'\' NOT NULL, sid BIGINT DEFAULT 0 NOT NULL, langcode VARCHAR(12) DEFAULT \'\' NOT NULL, type VARCHAR(64) NOT NULL, score DOUBLE PRECISION DEFAULT NULL, PRIMARY KEY(word, sid, langcode, type))');
        $this->addSql('CREATE INDEX search_index__sid_type__idx ON search_index (sid, langcode, type)');
        $this->addSql('COMMENT ON TABLE search_index IS \'Stores the search index, associating words, items and scores.\'');
        $this->addSql('COMMENT ON COLUMN search_index.word IS \'The "search_total".word that is associated with the search item.\'');
        $this->addSql('COMMENT ON COLUMN search_index.sid IS \'The "search_dataset".sid of the searchable item to which the word belongs.\'');
        $this->addSql('COMMENT ON COLUMN search_index.langcode IS \'The "languages".langcode of the item variant.\'');
        $this->addSql('COMMENT ON COLUMN search_index.type IS \'The "search_dataset".type of the searchable item to which the word belongs.\'');
        $this->addSql('COMMENT ON COLUMN search_index.score IS \'The numeric score of the word, higher being more important.\'');
        $this->addSql('CREATE TABLE cache_dynamic_page_cache (cid VARCHAR(255) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, expire INT DEFAULT 0 NOT NULL, created NUMERIC(14, 3) DEFAULT \'0\' NOT NULL, serialized SMALLINT DEFAULT 0 NOT NULL, tags TEXT DEFAULT NULL, checksum VARCHAR(255) NOT NULL, PRIMARY KEY(cid))');
        $this->addSql('CREATE INDEX cache_dynamic_page_cache__created__idx ON cache_dynamic_page_cache (created)');
        $this->addSql('CREATE INDEX cache_dynamic_page_cache__expire__idx ON cache_dynamic_page_cache (expire)');
        $this->addSql('COMMENT ON TABLE cache_dynamic_page_cache IS \'Storage for the cache API.\'');
        $this->addSql('COMMENT ON COLUMN cache_dynamic_page_cache.cid IS \'Primary Key: Unique cache ID.\'');
        $this->addSql('COMMENT ON COLUMN cache_dynamic_page_cache.data IS \'A collection of data to cache.\'');
        $this->addSql('COMMENT ON COLUMN cache_dynamic_page_cache.expire IS \'A Unix timestamp indicating when the cache entry should expire, or -1 for never.\'');
        $this->addSql('COMMENT ON COLUMN cache_dynamic_page_cache.created IS \'A timestamp with millisecond precision indicating when the cache entry was created.\'');
        $this->addSql('COMMENT ON COLUMN cache_dynamic_page_cache.serialized IS \'A flag to indicate whether content is serialized (1) or not (0).\'');
        $this->addSql('COMMENT ON COLUMN cache_dynamic_page_cache.tags IS \'Space-separated list of cache tags for this entry.\'');
        $this->addSql('COMMENT ON COLUMN cache_dynamic_page_cache.checksum IS \'The tag invalidation checksum when this entry was saved.\'');
        $this->addSql('CREATE TABLE file_managed (fid SERIAL NOT NULL, uuid VARCHAR(128) NOT NULL, langcode VARCHAR(12) NOT NULL, uid BIGINT DEFAULT NULL, filename VARCHAR(255) DEFAULT NULL, uri VARCHAR(255) NOT NULL, filemime VARCHAR(255) DEFAULT NULL, filesize BIGINT DEFAULT NULL, status SMALLINT NOT NULL, created INT DEFAULT NULL, changed INT NOT NULL, PRIMARY KEY(fid))');
        $this->addSql('CREATE INDEX file_managed__file_field__changed__idx ON file_managed (changed)');
        $this->addSql('CREATE INDEX file_managed__file_field__status__idx ON file_managed (status)');
        $this->addSql('CREATE INDEX file_managed__file_field__uri__idx ON file_managed (uri)');
        $this->addSql('CREATE INDEX file_managed__file_field__uid__target_id__idx ON file_managed (uid)');
        $this->addSql('CREATE UNIQUE INDEX file_managed__file_field__uuid__value__key ON file_managed (uuid)');
        $this->addSql('COMMENT ON TABLE file_managed IS \'The base table for file entities.\'');
        $this->addSql('COMMENT ON COLUMN file_managed.uid IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE users (uid SERIAL NOT NULL, uuid VARCHAR(128) NOT NULL, langcode VARCHAR(12) NOT NULL, PRIMARY KEY(uid))');
        $this->addSql('CREATE UNIQUE INDEX users__user_field__uuid__value__key ON users (uuid)');
        $this->addSql('COMMENT ON TABLE users IS \'The base table for user entities.\'');
        $this->addSql('CREATE TABLE taxonomy_term_revision__parent (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, revision_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, parent_target_id BIGINT NOT NULL, PRIMARY KEY(entity_id, revision_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX taxonomy_term_revision__parent__parent_target_id__idx ON taxonomy_term_revision__parent (parent_target_id)');
        $this->addSql('CREATE INDEX taxonomy_term_revision__parent__revision_id__idx ON taxonomy_term_revision__parent (revision_id)');
        $this->addSql('CREATE INDEX taxonomy_term_revision__parent__bundle__idx ON taxonomy_term_revision__parent (bundle)');
        $this->addSql('COMMENT ON TABLE taxonomy_term_revision__parent IS \'Revision archive storage for taxonomy_term field parent.\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term_revision__parent.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term_revision__parent.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term_revision__parent.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term_revision__parent.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term_revision__parent.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term_revision__parent.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term_revision__parent.parent_target_id IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE search_total (word VARCHAR(50) DEFAULT \'\' NOT NULL, count DOUBLE PRECISION DEFAULT NULL, PRIMARY KEY(word))');
        $this->addSql('COMMENT ON TABLE search_total IS \'Stores search totals for words.\'');
        $this->addSql('COMMENT ON COLUMN search_total.word IS \'Primary Key: Unique word in the search index.\'');
        $this->addSql('COMMENT ON COLUMN search_total.count IS \'The count of the word in the index using Zipf\'\'s law to equalize the probability distribution.\'');
        $this->addSql('CREATE TABLE user__user_picture (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, revision_id BIGINT NOT NULL, user_picture_target_id BIGINT NOT NULL, user_picture_alt VARCHAR(512) DEFAULT NULL, user_picture_title VARCHAR(1024) DEFAULT NULL, user_picture_width BIGINT DEFAULT NULL, user_picture_height BIGINT DEFAULT NULL, PRIMARY KEY(entity_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX user__user_picture__user_picture_target_id__idx ON user__user_picture (user_picture_target_id)');
        $this->addSql('CREATE INDEX user__user_picture__revision_id__idx ON user__user_picture (revision_id)');
        $this->addSql('CREATE INDEX user__user_picture__bundle__idx ON user__user_picture (bundle)');
        $this->addSql('COMMENT ON TABLE user__user_picture IS \'Data storage for user field user_picture.\'');
        $this->addSql('COMMENT ON COLUMN user__user_picture.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN user__user_picture.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN user__user_picture.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN user__user_picture.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN user__user_picture.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN user__user_picture.revision_id IS \'The entity revision id this data is attached to, which for an unversioned entity type is the same as the entity id\'');
        $this->addSql('COMMENT ON COLUMN user__user_picture.user_picture_target_id IS \'The ID of the file entity.\'');
        $this->addSql('COMMENT ON COLUMN user__user_picture.user_picture_alt IS \'Alternative image text, for the image\'\'s \'\'alt\'\' attribute.\'');
        $this->addSql('COMMENT ON COLUMN user__user_picture.user_picture_title IS \'Image title text, for the image\'\'s \'\'title\'\' attribute.\'');
        $this->addSql('COMMENT ON COLUMN user__user_picture.user_picture_width IS \'The width of the image in pixels.\'');
        $this->addSql('COMMENT ON COLUMN user__user_picture.user_picture_height IS \'The height of the image in pixels.\'');
        $this->addSql('CREATE TABLE block_content (id SERIAL NOT NULL, revision_id BIGINT DEFAULT NULL, type VARCHAR(32) NOT NULL, uuid VARCHAR(128) NOT NULL, langcode VARCHAR(12) NOT NULL, PRIMARY KEY(id))');
        $this->addSql('CREATE INDEX block_content__block_content_field__type__target_id__idx ON block_content (type)');
        $this->addSql('CREATE UNIQUE INDEX block_content__block_content_field__uuid__value__key ON block_content (uuid)');
        $this->addSql('CREATE UNIQUE INDEX block_content__block_content__revision_id__key ON block_content (revision_id)');
        $this->addSql('COMMENT ON TABLE block_content IS \'The base table for block_content entities.\'');
        $this->addSql('COMMENT ON COLUMN block_content.type IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE semaphore (name VARCHAR(255) DEFAULT \'\' NOT NULL, value VARCHAR(255) DEFAULT \'\' NOT NULL, expire DOUBLE PRECISION NOT NULL, PRIMARY KEY(name))');
        $this->addSql('CREATE INDEX semaphore__expire__idx ON semaphore (expire)');
        $this->addSql('CREATE INDEX semaphore__value__idx ON semaphore (value)');
        $this->addSql('COMMENT ON TABLE semaphore IS \'Table for holding semaphores, locks, flags, etc. that cannot be stored as state since they must not be cached.\'');
        $this->addSql('COMMENT ON COLUMN semaphore.name IS \'Primary Key: Unique name.\'');
        $this->addSql('COMMENT ON COLUMN semaphore.value IS \'A value for the semaphore.\'');
        $this->addSql('COMMENT ON COLUMN semaphore.expire IS \'A Unix timestamp with microseconds indicating when the semaphore should expire.\'');
        $this->addSql('CREATE TABLE users_field_data (uid BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, preferred_langcode VARCHAR(12) DEFAULT NULL, preferred_admin_langcode VARCHAR(12) DEFAULT NULL, name VARCHAR(60) NOT NULL, pass VARCHAR(255) DEFAULT NULL, mail VARCHAR(254) DEFAULT NULL, timezone VARCHAR(32) DEFAULT NULL, status SMALLINT DEFAULT NULL, created INT NOT NULL, changed INT DEFAULT NULL, access INT NOT NULL, login INT DEFAULT NULL, init VARCHAR(254) DEFAULT NULL, default_langcode SMALLINT NOT NULL, ldap_user_puid_sid VARCHAR(255) DEFAULT NULL, ldap_user_puid VARCHAR(255) DEFAULT NULL, ldap_user_puid_property VARCHAR(255) DEFAULT NULL, ldap_user_current_dn VARCHAR(255) DEFAULT NULL, ldap_user_last_checked INT DEFAULT NULL, ldap_user_ldap_exclude SMALLINT DEFAULT NULL, PRIMARY KEY(uid, langcode))');
        $this->addSql('CREATE INDEX users_field_data__user_field__access__idx ON users_field_data (access)');
        $this->addSql('CREATE INDEX users_field_data__user_field__created__idx ON users_field_data (created)');
        $this->addSql('CREATE INDEX users_field_data__user_field__mail__idx ON users_field_data (mail)');
        $this->addSql('CREATE INDEX users_field_data__user__id__default_langcode__langcode__idx ON users_field_data (uid, default_langcode, langcode)');
        $this->addSql('CREATE UNIQUE INDEX users_field_data__user__name__key ON users_field_data (name, langcode)');
        $this->addSql('COMMENT ON TABLE users_field_data IS \'The data table for user entities.\'');
        $this->addSql('CREATE TABLE node__body (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, revision_id BIGINT NOT NULL, body_value TEXT NOT NULL, body_summary TEXT DEFAULT NULL, body_format VARCHAR(255) DEFAULT NULL, PRIMARY KEY(entity_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX node__body__body_format__idx ON node__body (body_format)');
        $this->addSql('CREATE INDEX node__body__revision_id__idx ON node__body (revision_id)');
        $this->addSql('CREATE INDEX node__body__bundle__idx ON node__body (bundle)');
        $this->addSql('COMMENT ON TABLE node__body IS \'Data storage for node field body.\'');
        $this->addSql('COMMENT ON COLUMN node__body.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node__body.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node__body.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node__body.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node__body.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN node__body.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('CREATE TABLE taxonomy_term__parent (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, revision_id BIGINT NOT NULL, parent_target_id BIGINT NOT NULL, PRIMARY KEY(entity_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX taxonomy_term__parent__bundle_delta_target_id__idx ON taxonomy_term__parent (bundle, delta, parent_target_id)');
        $this->addSql('CREATE INDEX taxonomy_term__parent__parent_target_id__idx ON taxonomy_term__parent (parent_target_id)');
        $this->addSql('CREATE INDEX taxonomy_term__parent__revision_id__idx ON taxonomy_term__parent (revision_id)');
        $this->addSql('COMMENT ON TABLE taxonomy_term__parent IS \'Data storage for taxonomy_term field parent.\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term__parent.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term__parent.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term__parent.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term__parent.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term__parent.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term__parent.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term__parent.parent_target_id IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE path_alias (id SERIAL NOT NULL, revision_id BIGINT DEFAULT NULL, uuid VARCHAR(128) NOT NULL, langcode VARCHAR(12) NOT NULL, path VARCHAR(255) DEFAULT NULL, alias VARCHAR(255) DEFAULT NULL, status SMALLINT NOT NULL, PRIMARY KEY(id))');
        $this->addSql('CREATE INDEX path_alias__path_alias__path_langcode_id_status__idx ON path_alias (path, langcode, id, status)');
        $this->addSql('CREATE INDEX path_alias__path_alias__alias_langcode_id_status__idx ON path_alias (alias, langcode, id, status)');
        $this->addSql('CREATE INDEX path_alias__path_alias__status__idx ON path_alias (status, id)');
        $this->addSql('CREATE UNIQUE INDEX path_alias__path_alias_field__uuid__value__key ON path_alias (uuid)');
        $this->addSql('CREATE UNIQUE INDEX path_alias__path_alias__revision_id__key ON path_alias (revision_id)');
        $this->addSql('COMMENT ON TABLE path_alias IS \'The base table for path_alias entities.\'');
        $this->addSql('CREATE TABLE path_alias_revision (revision_id SERIAL NOT NULL, id BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, path VARCHAR(255) DEFAULT NULL, alias VARCHAR(255) DEFAULT NULL, status SMALLINT NOT NULL, revision_default SMALLINT DEFAULT NULL, PRIMARY KEY(revision_id))');
        $this->addSql('CREATE INDEX path_alias_revision__path_alias__id__idx ON path_alias_revision (id)');
        $this->addSql('COMMENT ON TABLE path_alias_revision IS \'The revision table for path_alias entities.\'');
        $this->addSql('CREATE TABLE cache_data (cid VARCHAR(255) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, expire INT DEFAULT 0 NOT NULL, created NUMERIC(14, 3) DEFAULT \'0\' NOT NULL, serialized SMALLINT DEFAULT 0 NOT NULL, tags TEXT DEFAULT NULL, checksum VARCHAR(255) NOT NULL, PRIMARY KEY(cid))');
        $this->addSql('CREATE INDEX cache_data__created__idx ON cache_data (created)');
        $this->addSql('CREATE INDEX cache_data__expire__idx ON cache_data (expire)');
        $this->addSql('COMMENT ON TABLE cache_data IS \'Storage for the cache API.\'');
        $this->addSql('COMMENT ON COLUMN cache_data.cid IS \'Primary Key: Unique cache ID.\'');
        $this->addSql('COMMENT ON COLUMN cache_data.data IS \'A collection of data to cache.\'');
        $this->addSql('COMMENT ON COLUMN cache_data.expire IS \'A Unix timestamp indicating when the cache entry should expire, or -1 for never.\'');
        $this->addSql('COMMENT ON COLUMN cache_data.created IS \'A timestamp with millisecond precision indicating when the cache entry was created.\'');
        $this->addSql('COMMENT ON COLUMN cache_data.serialized IS \'A flag to indicate whether content is serialized (1) or not (0).\'');
        $this->addSql('COMMENT ON COLUMN cache_data.tags IS \'Space-separated list of cache tags for this entry.\'');
        $this->addSql('COMMENT ON COLUMN cache_data.checksum IS \'The tag invalidation checksum when this entry was saved.\'');
        $this->addSql('CREATE TABLE locales_source (lid SERIAL NOT NULL, source TEXT NOT NULL, context VARCHAR(255) DEFAULT \'\' NOT NULL, version VARCHAR(20) DEFAULT \'none\' NOT NULL, PRIMARY KEY(lid))');
        $this->addSql('CREATE INDEX locales_source__source_context__idx ON locales_source (context)');
        $this->addSql('COMMENT ON TABLE locales_source IS \'List of English source strings.\'');
        $this->addSql('COMMENT ON COLUMN locales_source.lid IS \'Unique identifier of this string.\'');
        $this->addSql('COMMENT ON COLUMN locales_source.source IS \'The original string in English.\'');
        $this->addSql('COMMENT ON COLUMN locales_source.context IS \'The context this string applies to.\'');
        $this->addSql('COMMENT ON COLUMN locales_source.version IS \'Version of Drupal where the string was last used (for locales optimization).\'');
        $this->addSql('CREATE TABLE taxonomy_index (nid BIGINT DEFAULT 0 NOT NULL, tid BIGINT DEFAULT 0 NOT NULL, status INT DEFAULT 1 NOT NULL, sticky SMALLINT DEFAULT 0, created INT DEFAULT 0 NOT NULL, PRIMARY KEY(nid, tid))');
        $this->addSql('CREATE INDEX taxonomy_index__term_node__idx ON taxonomy_index (tid, status, sticky, created)');
        $this->addSql('COMMENT ON TABLE taxonomy_index IS \'Maintains denormalized information about node/term relationships.\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_index.nid IS \'The "node".nid this record tracks.\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_index.tid IS \'The term ID.\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_index.status IS \'Boolean indicating whether the node is published (visible to non-administrators).\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_index.sticky IS \'Boolean indicating whether the node is sticky.\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_index.created IS \'The Unix timestamp when the node was created.\'');
        $this->addSql('CREATE TABLE node_revision__field_ville (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, revision_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, field_ville_value VARCHAR(255) NOT NULL, PRIMARY KEY(entity_id, revision_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX node_revision__field_ville__revision_id__idx ON node_revision__field_ville (revision_id)');
        $this->addSql('CREATE INDEX node_revision__field_ville__bundle__idx ON node_revision__field_ville (bundle)');
        $this->addSql('COMMENT ON TABLE node_revision__field_ville IS \'Revision archive storage for node field field_ville.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_ville.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_ville.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_ville.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_ville.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_ville.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_ville.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('CREATE TABLE node__field_image (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, revision_id BIGINT NOT NULL, field_image_target_id BIGINT NOT NULL, field_image_alt VARCHAR(512) DEFAULT NULL, field_image_title VARCHAR(1024) DEFAULT NULL, field_image_width BIGINT DEFAULT NULL, field_image_height BIGINT DEFAULT NULL, PRIMARY KEY(entity_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX node__field_image__field_image_target_id__idx ON node__field_image (field_image_target_id)');
        $this->addSql('CREATE INDEX node__field_image__revision_id__idx ON node__field_image (revision_id)');
        $this->addSql('CREATE INDEX node__field_image__bundle__idx ON node__field_image (bundle)');
        $this->addSql('COMMENT ON TABLE node__field_image IS \'Data storage for node field field_image.\'');
        $this->addSql('COMMENT ON COLUMN node__field_image.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node__field_image.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node__field_image.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node__field_image.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node__field_image.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN node__field_image.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node__field_image.field_image_target_id IS \'The ID of the file entity.\'');
        $this->addSql('COMMENT ON COLUMN node__field_image.field_image_alt IS \'Alternative image text, for the image\'\'s \'\'alt\'\' attribute.\'');
        $this->addSql('COMMENT ON COLUMN node__field_image.field_image_title IS \'Image title text, for the image\'\'s \'\'title\'\' attribute.\'');
        $this->addSql('COMMENT ON COLUMN node__field_image.field_image_width IS \'The width of the image in pixels.\'');
        $this->addSql('COMMENT ON COLUMN node__field_image.field_image_height IS \'The height of the image in pixels.\'');
        $this->addSql('CREATE TABLE block_content__body (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, revision_id BIGINT NOT NULL, body_value TEXT NOT NULL, body_summary TEXT DEFAULT NULL, body_format VARCHAR(255) DEFAULT NULL, PRIMARY KEY(entity_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX block_content__body__body_format__idx ON block_content__body (body_format)');
        $this->addSql('CREATE INDEX block_content__body__revision_id__idx ON block_content__body (revision_id)');
        $this->addSql('CREATE INDEX block_content__body__bundle__idx ON block_content__body (bundle)');
        $this->addSql('COMMENT ON TABLE block_content__body IS \'Data storage for block_content field body.\'');
        $this->addSql('COMMENT ON COLUMN block_content__body.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN block_content__body.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN block_content__body.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN block_content__body.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN block_content__body.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN block_content__body.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('CREATE TABLE cache_page (cid VARCHAR(255) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, expire INT DEFAULT 0 NOT NULL, created NUMERIC(14, 3) DEFAULT \'0\' NOT NULL, serialized SMALLINT DEFAULT 0 NOT NULL, tags TEXT DEFAULT NULL, checksum VARCHAR(255) NOT NULL, PRIMARY KEY(cid))');
        $this->addSql('CREATE INDEX cache_page__created__idx ON cache_page (created)');
        $this->addSql('CREATE INDEX cache_page__expire__idx ON cache_page (expire)');
        $this->addSql('COMMENT ON TABLE cache_page IS \'Storage for the cache API.\'');
        $this->addSql('COMMENT ON COLUMN cache_page.cid IS \'Primary Key: Unique cache ID.\'');
        $this->addSql('COMMENT ON COLUMN cache_page.data IS \'A collection of data to cache.\'');
        $this->addSql('COMMENT ON COLUMN cache_page.expire IS \'A Unix timestamp indicating when the cache entry should expire, or -1 for never.\'');
        $this->addSql('COMMENT ON COLUMN cache_page.created IS \'A timestamp with millisecond precision indicating when the cache entry was created.\'');
        $this->addSql('COMMENT ON COLUMN cache_page.serialized IS \'A flag to indicate whether content is serialized (1) or not (0).\'');
        $this->addSql('COMMENT ON COLUMN cache_page.tags IS \'Space-separated list of cache tags for this entry.\'');
        $this->addSql('COMMENT ON COLUMN cache_page.checksum IS \'The tag invalidation checksum when this entry was saved.\'');
        $this->addSql('CREATE TABLE node_revision__body (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, revision_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, body_value TEXT NOT NULL, body_summary TEXT DEFAULT NULL, body_format VARCHAR(255) DEFAULT NULL, PRIMARY KEY(entity_id, revision_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX node_revision__body__body_format__idx ON node_revision__body (body_format)');
        $this->addSql('CREATE INDEX node_revision__body__revision_id__idx ON node_revision__body (revision_id)');
        $this->addSql('CREATE INDEX node_revision__body__bundle__idx ON node_revision__body (bundle)');
        $this->addSql('COMMENT ON TABLE node_revision__body IS \'Revision archive storage for node field body.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__body.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node_revision__body.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__body.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__body.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__body.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node_revision__body.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('CREATE TABLE taxonomy_term_field_revision (revision_id BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, tid BIGINT NOT NULL, status SMALLINT NOT NULL, name VARCHAR(255) DEFAULT NULL, description__value TEXT DEFAULT NULL, description__format VARCHAR(255) DEFAULT NULL, changed INT DEFAULT NULL, default_langcode SMALLINT NOT NULL, revision_translation_affected SMALLINT DEFAULT NULL, PRIMARY KEY(revision_id, langcode))');
        $this->addSql('CREATE INDEX "drupal_M2Qup2oS2zlnKrlzxtyMPc4wpQTHO8bTW9QMuxZwsiQ_idx" ON taxonomy_term_field_revision (description__format)');
        $this->addSql('CREATE INDEX "drupal_zC5XUHi3lXvFlyilgI0NlNZth42DSBX5G_FjNgxVTGQ_idx" ON taxonomy_term_field_revision (tid, default_langcode, langcode)');
        $this->addSql('COMMENT ON TABLE taxonomy_term_field_revision IS \'The revision data table for taxonomy_term entities.\'');
        $this->addSql('CREATE TABLE cache_rest (cid VARCHAR(255) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, expire INT DEFAULT 0 NOT NULL, created NUMERIC(14, 3) DEFAULT \'0\' NOT NULL, serialized SMALLINT DEFAULT 0 NOT NULL, tags TEXT DEFAULT NULL, checksum VARCHAR(255) NOT NULL, PRIMARY KEY(cid))');
        $this->addSql('CREATE INDEX cache_rest__created__idx ON cache_rest (created)');
        $this->addSql('CREATE INDEX cache_rest__expire__idx ON cache_rest (expire)');
        $this->addSql('COMMENT ON TABLE cache_rest IS \'Storage for the cache API.\'');
        $this->addSql('COMMENT ON COLUMN cache_rest.cid IS \'Primary Key: Unique cache ID.\'');
        $this->addSql('COMMENT ON COLUMN cache_rest.data IS \'A collection of data to cache.\'');
        $this->addSql('COMMENT ON COLUMN cache_rest.expire IS \'A Unix timestamp indicating when the cache entry should expire, or -1 for never.\'');
        $this->addSql('COMMENT ON COLUMN cache_rest.created IS \'A timestamp with millisecond precision indicating when the cache entry was created.\'');
        $this->addSql('COMMENT ON COLUMN cache_rest.serialized IS \'A flag to indicate whether content is serialized (1) or not (0).\'');
        $this->addSql('COMMENT ON COLUMN cache_rest.tags IS \'Space-separated list of cache tags for this entry.\'');
        $this->addSql('COMMENT ON COLUMN cache_rest.checksum IS \'The tag invalidation checksum when this entry was saved.\'');
        $this->addSql('CREATE TABLE node_field_data (nid BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, vid BIGINT NOT NULL, type VARCHAR(32) NOT NULL, status SMALLINT NOT NULL, uid BIGINT NOT NULL, title VARCHAR(255) NOT NULL, created INT NOT NULL, changed INT NOT NULL, promote SMALLINT NOT NULL, sticky SMALLINT NOT NULL, default_langcode SMALLINT NOT NULL, revision_translation_affected SMALLINT DEFAULT NULL, PRIMARY KEY(nid, langcode))');
        $this->addSql('CREATE INDEX node_field_data__node__title_type__idx ON node_field_data (title)');
        $this->addSql('CREATE INDEX node_field_data__node__frontpage__idx ON node_field_data (promote, status, sticky, created)');
        $this->addSql('CREATE INDEX node_field_data__node__status_type__idx ON node_field_data (status, type, nid)');
        $this->addSql('CREATE INDEX node_field_data__node_field__changed__idx ON node_field_data (changed)');
        $this->addSql('CREATE INDEX node_field_data__node_field__created__idx ON node_field_data (created)');
        $this->addSql('CREATE INDEX node_field_data__node_field__uid__target_id__idx ON node_field_data (uid)');
        $this->addSql('CREATE INDEX node_field_data__node_field__type__target_id__idx ON node_field_data (type)');
        $this->addSql('CREATE INDEX node_field_data__node__vid__idx ON node_field_data (vid)');
        $this->addSql('CREATE INDEX node_field_data__node__id__default_langcode__langcode__idx ON node_field_data (nid, default_langcode, langcode)');
        $this->addSql('COMMENT ON TABLE node_field_data IS \'The data table for node entities.\'');
        $this->addSql('COMMENT ON COLUMN node_field_data.type IS \'The ID of the target entity.\'');
        $this->addSql('COMMENT ON COLUMN node_field_data.uid IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE taxonomy_term_field_data (tid BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, revision_id BIGINT NOT NULL, vid VARCHAR(32) NOT NULL, status SMALLINT NOT NULL, name VARCHAR(255) NOT NULL, description__value TEXT DEFAULT NULL, description__format VARCHAR(255) DEFAULT NULL, weight INT NOT NULL, changed INT DEFAULT NULL, default_langcode SMALLINT NOT NULL, revision_translation_affected SMALLINT DEFAULT NULL, PRIMARY KEY(tid, langcode))');
        $this->addSql('CREATE INDEX taxonomy_term_field_data__taxonomy_term__vid_name__idx ON taxonomy_term_field_data (vid, name)');
        $this->addSql('CREATE INDEX taxonomy_term_field_data__taxonomy_term__tree__idx ON taxonomy_term_field_data (vid, weight, name)');
        $this->addSql('CREATE INDEX taxonomy_term_field_data__taxonomy_term__status_vid__idx ON taxonomy_term_field_data (status, vid, tid)');
        $this->addSql('CREATE INDEX taxonomy_term_field_data__taxonomy_term_field__name__idx ON taxonomy_term_field_data (name)');
        $this->addSql('CREATE INDEX taxonomy_term_field_data__taxonomy_term__revision_id__idx ON taxonomy_term_field_data (revision_id)');
        $this->addSql('CREATE INDEX "drupal_jVEqkc6s2d_YXyKzgPOmeuEYgeSndHxNyF_lQrsUBhg_idx" ON taxonomy_term_field_data (tid, default_langcode, langcode)');
        $this->addSql('COMMENT ON TABLE taxonomy_term_field_data IS \'The data table for taxonomy_term entities.\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term_field_data.vid IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE node_revision__field_numero (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, revision_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, field_numero_value VARCHAR(255) NOT NULL, PRIMARY KEY(entity_id, revision_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX node_revision__field_numero__revision_id__idx ON node_revision__field_numero (revision_id)');
        $this->addSql('CREATE INDEX node_revision__field_numero__bundle__idx ON node_revision__field_numero (bundle)');
        $this->addSql('COMMENT ON TABLE node_revision__field_numero IS \'Revision archive storage for node field field_numero.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_numero.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_numero.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_numero.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_numero.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_numero.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node_revision__field_numero.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('CREATE TABLE taxonomy_term_revision (revision_id SERIAL NOT NULL, tid BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, revision_user BIGINT DEFAULT NULL, revision_created INT DEFAULT NULL, revision_log_message TEXT DEFAULT NULL, revision_default SMALLINT DEFAULT NULL, PRIMARY KEY(revision_id))');
        $this->addSql('CREATE INDEX "drupal_2wXmNkIidFb530o9_wbeLfe93ztt315H0_uG2d8WoFE_idx" ON taxonomy_term_revision (revision_user)');
        $this->addSql('CREATE INDEX taxonomy_term_revision__taxonomy_term__tid__idx ON taxonomy_term_revision (tid)');
        $this->addSql('COMMENT ON TABLE taxonomy_term_revision IS \'The revision table for taxonomy_term entities.\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term_revision.revision_user IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE block_content_revision__body (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, revision_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, body_value TEXT NOT NULL, body_summary TEXT DEFAULT NULL, body_format VARCHAR(255) DEFAULT NULL, PRIMARY KEY(entity_id, revision_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX block_content_revision__body__body_format__idx ON block_content_revision__body (body_format)');
        $this->addSql('CREATE INDEX block_content_revision__body__revision_id__idx ON block_content_revision__body (revision_id)');
        $this->addSql('CREATE INDEX block_content_revision__body__bundle__idx ON block_content_revision__body (bundle)');
        $this->addSql('COMMENT ON TABLE block_content_revision__body IS \'Revision archive storage for block_content field body.\'');
        $this->addSql('COMMENT ON COLUMN block_content_revision__body.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN block_content_revision__body.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN block_content_revision__body.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN block_content_revision__body.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN block_content_revision__body.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN block_content_revision__body.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('CREATE TABLE node__field_tags (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, revision_id BIGINT NOT NULL, field_tags_target_id BIGINT NOT NULL, PRIMARY KEY(entity_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX node__field_tags__field_tags_target_id__idx ON node__field_tags (field_tags_target_id)');
        $this->addSql('CREATE INDEX node__field_tags__revision_id__idx ON node__field_tags (revision_id)');
        $this->addSql('CREATE INDEX node__field_tags__bundle__idx ON node__field_tags (bundle)');
        $this->addSql('COMMENT ON TABLE node__field_tags IS \'Data storage for node field field_tags.\'');
        $this->addSql('COMMENT ON COLUMN node__field_tags.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node__field_tags.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node__field_tags.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node__field_tags.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node__field_tags.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN node__field_tags.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node__field_tags.field_tags_target_id IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE block_content_revision (revision_id SERIAL NOT NULL, id BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, revision_user BIGINT DEFAULT NULL, revision_created INT DEFAULT NULL, revision_log TEXT DEFAULT NULL, revision_default SMALLINT DEFAULT NULL, PRIMARY KEY(revision_id))');
        $this->addSql('CREATE INDEX "drupal__CipXU6qdl5f10_BuhE_ogc1jMaOmJLoMQ5Qdkccjkg_idx" ON block_content_revision (revision_user)');
        $this->addSql('CREATE INDEX block_content_revision__block_content__id__idx ON block_content_revision (id)');
        $this->addSql('COMMENT ON TABLE block_content_revision IS \'The revision table for block_content entities.\'');
        $this->addSql('COMMENT ON COLUMN block_content_revision.revision_user IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE cache_config (cid VARCHAR(255) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, expire INT DEFAULT 0 NOT NULL, created NUMERIC(14, 3) DEFAULT \'0\' NOT NULL, serialized SMALLINT DEFAULT 0 NOT NULL, tags TEXT DEFAULT NULL, checksum VARCHAR(255) NOT NULL, PRIMARY KEY(cid))');
        $this->addSql('CREATE INDEX cache_config__created__idx ON cache_config (created)');
        $this->addSql('CREATE INDEX cache_config__expire__idx ON cache_config (expire)');
        $this->addSql('COMMENT ON TABLE cache_config IS \'Storage for the cache API.\'');
        $this->addSql('COMMENT ON COLUMN cache_config.cid IS \'Primary Key: Unique cache ID.\'');
        $this->addSql('COMMENT ON COLUMN cache_config.data IS \'A collection of data to cache.\'');
        $this->addSql('COMMENT ON COLUMN cache_config.expire IS \'A Unix timestamp indicating when the cache entry should expire, or -1 for never.\'');
        $this->addSql('COMMENT ON COLUMN cache_config.created IS \'A timestamp with millisecond precision indicating when the cache entry was created.\'');
        $this->addSql('COMMENT ON COLUMN cache_config.serialized IS \'A flag to indicate whether content is serialized (1) or not (0).\'');
        $this->addSql('COMMENT ON COLUMN cache_config.tags IS \'Space-separated list of cache tags for this entry.\'');
        $this->addSql('COMMENT ON COLUMN cache_config.checksum IS \'The tag invalidation checksum when this entry was saved.\'');
        $this->addSql('CREATE TABLE taxonomy_term_data (tid SERIAL NOT NULL, revision_id BIGINT DEFAULT NULL, vid VARCHAR(32) NOT NULL, uuid VARCHAR(128) NOT NULL, langcode VARCHAR(12) NOT NULL, PRIMARY KEY(tid))');
        $this->addSql('CREATE INDEX taxonomy_term_data__taxonomy_term_field__vid__target_id__idx ON taxonomy_term_data (vid)');
        $this->addSql('CREATE UNIQUE INDEX taxonomy_term_data__taxonomy_term_field__uuid__value__key ON taxonomy_term_data (uuid)');
        $this->addSql('CREATE UNIQUE INDEX taxonomy_term_data__taxonomy_term__revision_id__key ON taxonomy_term_data (revision_id)');
        $this->addSql('COMMENT ON TABLE taxonomy_term_data IS \'The base table for taxonomy_term entities.\'');
        $this->addSql('COMMENT ON COLUMN taxonomy_term_data.vid IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE cache_discovery (cid VARCHAR(255) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, expire INT DEFAULT 0 NOT NULL, created NUMERIC(14, 3) DEFAULT \'0\' NOT NULL, serialized SMALLINT DEFAULT 0 NOT NULL, tags TEXT DEFAULT NULL, checksum VARCHAR(255) NOT NULL, PRIMARY KEY(cid))');
        $this->addSql('CREATE INDEX cache_discovery__created__idx ON cache_discovery (created)');
        $this->addSql('CREATE INDEX cache_discovery__expire__idx ON cache_discovery (expire)');
        $this->addSql('COMMENT ON TABLE cache_discovery IS \'Storage for the cache API.\'');
        $this->addSql('COMMENT ON COLUMN cache_discovery.cid IS \'Primary Key: Unique cache ID.\'');
        $this->addSql('COMMENT ON COLUMN cache_discovery.data IS \'A collection of data to cache.\'');
        $this->addSql('COMMENT ON COLUMN cache_discovery.expire IS \'A Unix timestamp indicating when the cache entry should expire, or -1 for never.\'');
        $this->addSql('COMMENT ON COLUMN cache_discovery.created IS \'A timestamp with millisecond precision indicating when the cache entry was created.\'');
        $this->addSql('COMMENT ON COLUMN cache_discovery.serialized IS \'A flag to indicate whether content is serialized (1) or not (0).\'');
        $this->addSql('COMMENT ON COLUMN cache_discovery.tags IS \'Space-separated list of cache tags for this entry.\'');
        $this->addSql('COMMENT ON COLUMN cache_discovery.checksum IS \'The tag invalidation checksum when this entry was saved.\'');
        $this->addSql('CREATE TABLE history (uid INT DEFAULT 0 NOT NULL, nid BIGINT DEFAULT 0 NOT NULL, "timestamp" INT DEFAULT 0 NOT NULL, PRIMARY KEY(uid, nid))');
        $this->addSql('CREATE INDEX history__nid__idx ON history (nid)');
        $this->addSql('COMMENT ON TABLE history IS \'A record of which "users" have read which "node"s.\'');
        $this->addSql('COMMENT ON COLUMN history.uid IS \'The "users".uid that read the "node" nid.\'');
        $this->addSql('COMMENT ON COLUMN history.nid IS \'The "node".nid that was read.\'');
        $this->addSql('COMMENT ON COLUMN history."timestamp" IS \'The Unix timestamp at which the read occurred.\'');
        $this->addSql('CREATE TABLE file_usage (fid BIGINT NOT NULL, module VARCHAR(50) DEFAULT \'\' NOT NULL, type VARCHAR(64) DEFAULT \'\' NOT NULL, id VARCHAR(64) DEFAULT \'0\' NOT NULL, count BIGINT DEFAULT 0 NOT NULL, PRIMARY KEY(fid, type, id, module))');
        $this->addSql('CREATE INDEX file_usage__fid_module__idx ON file_usage (fid, module)');
        $this->addSql('CREATE INDEX file_usage__fid_count__idx ON file_usage (fid, count)');
        $this->addSql('CREATE INDEX file_usage__type_id__idx ON file_usage (type, id)');
        $this->addSql('COMMENT ON TABLE file_usage IS \'Track where a file is used.\'');
        $this->addSql('COMMENT ON COLUMN file_usage.fid IS \'File ID.\'');
        $this->addSql('COMMENT ON COLUMN file_usage.module IS \'The name of the module that is using the file.\'');
        $this->addSql('COMMENT ON COLUMN file_usage.type IS \'The name of the object type in which the file is used.\'');
        $this->addSql('COMMENT ON COLUMN file_usage.id IS \'The primary key of the object using the file.\'');
        $this->addSql('COMMENT ON COLUMN file_usage.count IS \'The number of times this file is used by this object.\'');
        $this->addSql('CREATE TABLE block_content_field_revision (revision_id BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, id BIGINT NOT NULL, status SMALLINT NOT NULL, info VARCHAR(255) DEFAULT NULL, changed INT DEFAULT NULL, default_langcode SMALLINT NOT NULL, revision_translation_affected SMALLINT DEFAULT NULL, PRIMARY KEY(revision_id, langcode))');
        $this->addSql('CREATE INDEX "drupal_PzJThk1bhC5wux6rrih6c65UXJZ9UmNGl0Eroda5fLk_idx" ON block_content_field_revision (id, default_langcode, langcode)');
        $this->addSql('COMMENT ON TABLE block_content_field_revision IS \'The revision data table for block_content entities.\'');
        $this->addSql('CREATE TABLE node_access (nid BIGINT DEFAULT 0 NOT NULL, langcode VARCHAR(12) DEFAULT \'\' NOT NULL, gid BIGINT DEFAULT 0 NOT NULL, realm VARCHAR(255) DEFAULT \'\' NOT NULL, fallback INT DEFAULT 1 NOT NULL, grant_view INT DEFAULT 0 NOT NULL, grant_update INT DEFAULT 0 NOT NULL, grant_delete INT DEFAULT 0 NOT NULL, PRIMARY KEY(nid, gid, realm, langcode))');
        $this->addSql('COMMENT ON TABLE node_access IS \'Identifies which realm/grant pairs a user must possess in order to view, update, or delete specific nodes.\'');
        $this->addSql('COMMENT ON COLUMN node_access.nid IS \'The "node".nid this record affects.\'');
        $this->addSql('COMMENT ON COLUMN node_access.langcode IS \'The "language".langcode of this node.\'');
        $this->addSql('COMMENT ON COLUMN node_access.gid IS \'The grant ID a user must possess in the specified realm to gain this row\'\'s privileges on the node.\'');
        $this->addSql('COMMENT ON COLUMN node_access.realm IS \'The realm in which the user must possess the grant ID. Modules can define one or more realms by implementing hook_node_grants().\'');
        $this->addSql('COMMENT ON COLUMN node_access.fallback IS \'Boolean indicating whether this record should be used as a fallback if a language condition is not provided.\'');
        $this->addSql('COMMENT ON COLUMN node_access.grant_view IS \'Boolean indicating whether a user with the realm/grant pair can view this node.\'');
        $this->addSql('COMMENT ON COLUMN node_access.grant_update IS \'Boolean indicating whether a user with the realm/grant pair can edit this node.\'');
        $this->addSql('COMMENT ON COLUMN node_access.grant_delete IS \'Boolean indicating whether a user with the realm/grant pair can delete this node.\'');
        $this->addSql('CREATE TABLE cache_bootstrap (cid VARCHAR(255) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, expire INT DEFAULT 0 NOT NULL, created NUMERIC(14, 3) DEFAULT \'0\' NOT NULL, serialized SMALLINT DEFAULT 0 NOT NULL, tags TEXT DEFAULT NULL, checksum VARCHAR(255) NOT NULL, PRIMARY KEY(cid))');
        $this->addSql('CREATE INDEX cache_bootstrap__created__idx ON cache_bootstrap (created)');
        $this->addSql('CREATE INDEX cache_bootstrap__expire__idx ON cache_bootstrap (expire)');
        $this->addSql('COMMENT ON TABLE cache_bootstrap IS \'Storage for the cache API.\'');
        $this->addSql('COMMENT ON COLUMN cache_bootstrap.cid IS \'Primary Key: Unique cache ID.\'');
        $this->addSql('COMMENT ON COLUMN cache_bootstrap.data IS \'A collection of data to cache.\'');
        $this->addSql('COMMENT ON COLUMN cache_bootstrap.expire IS \'A Unix timestamp indicating when the cache entry should expire, or -1 for never.\'');
        $this->addSql('COMMENT ON COLUMN cache_bootstrap.created IS \'A timestamp with millisecond precision indicating when the cache entry was created.\'');
        $this->addSql('COMMENT ON COLUMN cache_bootstrap.serialized IS \'A flag to indicate whether content is serialized (1) or not (0).\'');
        $this->addSql('COMMENT ON COLUMN cache_bootstrap.tags IS \'Space-separated list of cache tags for this entry.\'');
        $this->addSql('COMMENT ON COLUMN cache_bootstrap.checksum IS \'The tag invalidation checksum when this entry was saved.\'');
        $this->addSql('CREATE TABLE node_revision (vid SERIAL NOT NULL, nid BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, revision_uid BIGINT DEFAULT NULL, revision_timestamp INT DEFAULT NULL, revision_log TEXT DEFAULT NULL, revision_default SMALLINT DEFAULT NULL, PRIMARY KEY(vid))');
        $this->addSql('CREATE INDEX node_revision__node_field__revision_uid__target_id__idx ON node_revision (revision_uid)');
        $this->addSql('CREATE INDEX node_revision__node_field__langcode__idx ON node_revision (langcode)');
        $this->addSql('CREATE INDEX node_revision__node__nid__idx ON node_revision (nid)');
        $this->addSql('COMMENT ON TABLE node_revision IS \'The revision table for node entities.\'');
        $this->addSql('COMMENT ON COLUMN node_revision.revision_uid IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE locale_file (project VARCHAR(255) DEFAULT \'\' NOT NULL, langcode VARCHAR(12) DEFAULT \'\' NOT NULL, filename VARCHAR(255) DEFAULT \'\' NOT NULL, version VARCHAR(128) DEFAULT \'\' NOT NULL, uri VARCHAR(255) DEFAULT \'\' NOT NULL, "timestamp" INT DEFAULT 0, last_checked INT DEFAULT 0, PRIMARY KEY(project, langcode))');
        $this->addSql('COMMENT ON TABLE locale_file IS \'File import status information for interface translation files.\'');
        $this->addSql('COMMENT ON COLUMN locale_file.project IS \'A unique short name to identify the project the file belongs to.\'');
        $this->addSql('COMMENT ON COLUMN locale_file.langcode IS \'Language code of this translation. References "language".langcode.\'');
        $this->addSql('COMMENT ON COLUMN locale_file.filename IS \'Filename of the imported file.\'');
        $this->addSql('COMMENT ON COLUMN locale_file.version IS \'Version tag of the imported file.\'');
        $this->addSql('COMMENT ON COLUMN locale_file.uri IS \'URI of the remote file, the resulting local file or the locally imported file.\'');
        $this->addSql('COMMENT ON COLUMN locale_file."timestamp" IS \'Unix timestamp of the imported file.\'');
        $this->addSql('COMMENT ON COLUMN locale_file.last_checked IS \'Unix timestamp of the last time this translation was confirmed to be the most recent release available.\'');
        $this->addSql('CREATE TABLE node__field_numero (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, revision_id BIGINT NOT NULL, field_numero_value VARCHAR(255) NOT NULL, PRIMARY KEY(entity_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX node__field_numero__revision_id__idx ON node__field_numero (revision_id)');
        $this->addSql('CREATE INDEX node__field_numero__bundle__idx ON node__field_numero (bundle)');
        $this->addSql('COMMENT ON TABLE node__field_numero IS \'Data storage for node field field_numero.\'');
        $this->addSql('COMMENT ON COLUMN node__field_numero.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node__field_numero.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node__field_numero.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node__field_numero.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node__field_numero.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN node__field_numero.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('CREATE TABLE locales_location (lid SERIAL NOT NULL, sid INT NOT NULL, type VARCHAR(50) DEFAULT \'\' NOT NULL, name VARCHAR(255) DEFAULT \'\' NOT NULL, version VARCHAR(20) DEFAULT \'none\' NOT NULL, PRIMARY KEY(lid))');
        $this->addSql('CREATE INDEX locales_location__string_type__idx ON locales_location (sid, type)');
        $this->addSql('COMMENT ON TABLE locales_location IS \'Location information for source strings.\'');
        $this->addSql('COMMENT ON COLUMN locales_location.lid IS \'Unique identifier of this location.\'');
        $this->addSql('COMMENT ON COLUMN locales_location.sid IS \'Unique identifier of this string.\'');
        $this->addSql('COMMENT ON COLUMN locales_location.type IS \'The location type (file, config, path, etc).\'');
        $this->addSql('COMMENT ON COLUMN locales_location.name IS \'Type dependent location information (file name, path, etc).\'');
        $this->addSql('COMMENT ON COLUMN locales_location.version IS \'Version of Drupal where the location was found.\'');
        $this->addSql('CREATE TABLE menu_tree (mlid SERIAL NOT NULL, menu_name VARCHAR(32) DEFAULT \'\' NOT NULL, id VARCHAR(255) NOT NULL, parent VARCHAR(255) DEFAULT \'\' NOT NULL, route_name VARCHAR(255) DEFAULT NULL, route_param_key VARCHAR(255) DEFAULT NULL, route_parameters BYTEA DEFAULT NULL, url VARCHAR(255) DEFAULT \'\' NOT NULL, title BYTEA DEFAULT NULL, description BYTEA DEFAULT NULL, class TEXT DEFAULT NULL, options BYTEA DEFAULT NULL, provider VARCHAR(50) DEFAULT \'system\' NOT NULL, enabled SMALLINT DEFAULT 1 NOT NULL, discovered SMALLINT DEFAULT 0 NOT NULL, expanded SMALLINT DEFAULT 0 NOT NULL, weight INT DEFAULT 0 NOT NULL, metadata BYTEA DEFAULT NULL, has_children SMALLINT DEFAULT 0 NOT NULL, depth SMALLINT DEFAULT 0 NOT NULL, p1 BIGINT DEFAULT 0 NOT NULL, p2 BIGINT DEFAULT 0 NOT NULL, p3 BIGINT DEFAULT 0 NOT NULL, p4 BIGINT DEFAULT 0 NOT NULL, p5 BIGINT DEFAULT 0 NOT NULL, p6 BIGINT DEFAULT 0 NOT NULL, p7 BIGINT DEFAULT 0 NOT NULL, p8 BIGINT DEFAULT 0 NOT NULL, p9 BIGINT DEFAULT 0 NOT NULL, form_class VARCHAR(255) DEFAULT NULL, PRIMARY KEY(mlid))');
        $this->addSql('CREATE INDEX menu_tree__menu_parent_expand_child__idx ON menu_tree (menu_name, expanded, has_children)');
        $this->addSql('CREATE INDEX menu_tree__menu_parents__idx ON menu_tree (menu_name, p1, p2, p3, p4, p5, p6, p7, p8, p9)');
        $this->addSql('CREATE UNIQUE INDEX menu_tree__id__key ON menu_tree (id)');
        $this->addSql('COMMENT ON TABLE menu_tree IS \'Contains the menu tree hierarchy.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.mlid IS \'The menu link ID (mlid) is the integer primary key.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.menu_name IS \'The menu name. All links with the same menu name (such as \'\'tools\'\') are part of the same menu.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.id IS \'Unique machine name: the plugin ID.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.parent IS \'The plugin ID for the parent of this link.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.route_name IS \'The machine name of a defined Symfony Route this menu link represents.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.route_param_key IS \'An encoded string of route parameters for loading by route.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.route_parameters IS \'Serialized array of route parameters of this menu link.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.url IS \'The external path this link points to (when not using a route).\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.title IS \'The serialized title for the link. May be a TranslatableMarkup.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.description IS \'The serialized description of this link - used for admin pages and title attribute. May be a TranslatableMarkup.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.class IS \'The class for this link plugin.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.options IS \'A serialized array of URL options, such as a query string or HTML attributes.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.provider IS \'The name of the module that generated this link.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.enabled IS \'A flag for whether the link should be rendered in menus. (0 = a disabled menu link that may be shown on admin screens, 1 = a normal, visible link)\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.discovered IS \'A flag for whether the link was discovered, so can be purged on rebuild\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.expanded IS \'Flag for whether this link should be rendered as expanded in menus - expanded links always have their child links displayed, instead of only when the link is in the active trail (1 = expanded, 0 = not expanded)\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.weight IS \'Link weight among links in the same menu at the same depth.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.metadata IS \'A serialized array of data that may be used by the plugin instance.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.has_children IS \'Flag indicating whether any enabled links have this link as a parent (1 = enabled children exist, 0 = no enabled children).\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.depth IS \'The depth relative to the top level. A link with empty parent will have depth == 1.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.p1 IS \'The first mlid in the materialized path. If N = depth, then pN must equal the mlid. If depth > 1 then p(N-1) must equal the parent link mlid. All pX where X > depth must equal zero. The columns p1 .. p9 are also called the parents.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.p2 IS \'The second mlid in the materialized path. See p1.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.p3 IS \'The third mlid in the materialized path. See p1.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.p4 IS \'The fourth mlid in the materialized path. See p1.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.p5 IS \'The fifth mlid in the materialized path. See p1.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.p6 IS \'The sixth mlid in the materialized path. See p1.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.p7 IS \'The seventh mlid in the materialized path. See p1.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.p8 IS \'The eighth mlid in the materialized path. See p1.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.p9 IS \'The ninth mlid in the materialized path. See p1.\'');
        $this->addSql('COMMENT ON COLUMN menu_tree.form_class IS \'meh\'');
        $this->addSql('CREATE TABLE cache_default (cid VARCHAR(255) DEFAULT \'\' NOT NULL, data BYTEA DEFAULT NULL, expire INT DEFAULT 0 NOT NULL, created NUMERIC(14, 3) DEFAULT \'0\' NOT NULL, serialized SMALLINT DEFAULT 0 NOT NULL, tags TEXT DEFAULT NULL, checksum VARCHAR(255) NOT NULL, PRIMARY KEY(cid))');
        $this->addSql('CREATE INDEX cache_default__created__idx ON cache_default (created)');
        $this->addSql('CREATE INDEX cache_default__expire__idx ON cache_default (expire)');
        $this->addSql('COMMENT ON TABLE cache_default IS \'Storage for the cache API.\'');
        $this->addSql('COMMENT ON COLUMN cache_default.cid IS \'Primary Key: Unique cache ID.\'');
        $this->addSql('COMMENT ON COLUMN cache_default.data IS \'A collection of data to cache.\'');
        $this->addSql('COMMENT ON COLUMN cache_default.expire IS \'A Unix timestamp indicating when the cache entry should expire, or -1 for never.\'');
        $this->addSql('COMMENT ON COLUMN cache_default.created IS \'A timestamp with millisecond precision indicating when the cache entry was created.\'');
        $this->addSql('COMMENT ON COLUMN cache_default.serialized IS \'A flag to indicate whether content is serialized (1) or not (0).\'');
        $this->addSql('COMMENT ON COLUMN cache_default.tags IS \'Space-separated list of cache tags for this entry.\'');
        $this->addSql('COMMENT ON COLUMN cache_default.checksum IS \'The tag invalidation checksum when this entry was saved.\'');
        $this->addSql('CREATE TABLE node (nid SERIAL NOT NULL, vid BIGINT DEFAULT NULL, type VARCHAR(32) NOT NULL, uuid VARCHAR(128) NOT NULL, langcode VARCHAR(12) NOT NULL, PRIMARY KEY(nid))');
        $this->addSql('CREATE INDEX node__node_field__type__target_id__idx ON node (type)');
        $this->addSql('CREATE UNIQUE INDEX node__node_field__uuid__value__key ON node (uuid)');
        $this->addSql('CREATE UNIQUE INDEX node__node__vid__key ON node (vid)');
        $this->addSql('COMMENT ON TABLE node IS \'The base table for node entities.\'');
        $this->addSql('COMMENT ON COLUMN node.type IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE router (name VARCHAR(255) DEFAULT \'\' NOT NULL, path VARCHAR(255) DEFAULT \'\' NOT NULL, pattern_outline VARCHAR(255) DEFAULT \'\' NOT NULL, fit INT DEFAULT 0 NOT NULL, route BYTEA DEFAULT NULL, number_parts SMALLINT DEFAULT 0 NOT NULL, PRIMARY KEY(name))');
        $this->addSql('CREATE INDEX router__pattern_outline_parts__idx ON router (pattern_outline, number_parts)');
        $this->addSql('COMMENT ON TABLE router IS \'Maps paths to various callbacks (access, page and title)\'');
        $this->addSql('COMMENT ON COLUMN router.name IS \'Primary Key: Machine name of this route\'');
        $this->addSql('COMMENT ON COLUMN router.path IS \'The path for this URI\'');
        $this->addSql('COMMENT ON COLUMN router.pattern_outline IS \'The pattern\'');
        $this->addSql('COMMENT ON COLUMN router.fit IS \'A numeric representation of how specific the path is.\'');
        $this->addSql('COMMENT ON COLUMN router.route IS \'A serialized Route object\'');
        $this->addSql('COMMENT ON COLUMN router.number_parts IS \'Number of parts in this router path.\'');
        $this->addSql('CREATE TABLE block_content_field_data (id BIGINT NOT NULL, langcode VARCHAR(12) NOT NULL, revision_id BIGINT NOT NULL, type VARCHAR(32) NOT NULL, status SMALLINT NOT NULL, info VARCHAR(255) DEFAULT NULL, changed INT DEFAULT NULL, reusable SMALLINT DEFAULT NULL, default_langcode SMALLINT NOT NULL, revision_translation_affected SMALLINT DEFAULT NULL, PRIMARY KEY(id, langcode))');
        $this->addSql('CREATE INDEX block_content_field_data__block_content__status_type__idx ON block_content_field_data (status, type, id)');
        $this->addSql('CREATE INDEX "drupal_Vlz4ZHQ_d0wCuo1mttzoczYX0MIgffhtal7RzxmuKw4_idx" ON block_content_field_data (type)');
        $this->addSql('CREATE INDEX block_content_field_data__block_content__revision_id__idx ON block_content_field_data (revision_id)');
        $this->addSql('CREATE INDEX "drupal_wL9rKs7CrdJVvCzBzlB7hYXDGYa3Ov_zwIcY6Ecjfeo_idx" ON block_content_field_data (id, default_langcode, langcode)');
        $this->addSql('COMMENT ON TABLE block_content_field_data IS \'The data table for block_content entities.\'');
        $this->addSql('COMMENT ON COLUMN block_content_field_data.type IS \'The ID of the target entity.\'');
        $this->addSql('CREATE TABLE locales_target (lid INT DEFAULT 0 NOT NULL, language VARCHAR(12) DEFAULT \'\' NOT NULL, translation TEXT NOT NULL, customized INT DEFAULT 0 NOT NULL, PRIMARY KEY(language, lid))');
        $this->addSql('CREATE INDEX locales_target__lid__idx ON locales_target (lid)');
        $this->addSql('COMMENT ON TABLE locales_target IS \'Stores translated versions of strings.\'');
        $this->addSql('COMMENT ON COLUMN locales_target.lid IS \'Source string ID. References "locales_source".lid.\'');
        $this->addSql('COMMENT ON COLUMN locales_target.language IS \'Language code. References "language".langcode.\'');
        $this->addSql('COMMENT ON COLUMN locales_target.translation IS \'Translation string value in this language.\'');
        $this->addSql('COMMENT ON COLUMN locales_target.customized IS \'Boolean indicating whether the translation is custom to this site.\'');
        $this->addSql('CREATE TABLE node__field_nom (deleted SMALLINT DEFAULT 0 NOT NULL, entity_id BIGINT NOT NULL, langcode VARCHAR(32) DEFAULT \'\' NOT NULL, delta BIGINT NOT NULL, bundle VARCHAR(128) DEFAULT \'\' NOT NULL, revision_id BIGINT NOT NULL, field_nom_value VARCHAR(255) NOT NULL, PRIMARY KEY(entity_id, deleted, delta, langcode))');
        $this->addSql('CREATE INDEX node__field_nom__revision_id__idx ON node__field_nom (revision_id)');
        $this->addSql('CREATE INDEX node__field_nom__bundle__idx ON node__field_nom (bundle)');
        $this->addSql('COMMENT ON TABLE node__field_nom IS \'Data storage for node field field_nom.\'');
        $this->addSql('COMMENT ON COLUMN node__field_nom.deleted IS \'A boolean indicating whether this data item has been deleted\'');
        $this->addSql('COMMENT ON COLUMN node__field_nom.entity_id IS \'The entity id this data is attached to\'');
        $this->addSql('COMMENT ON COLUMN node__field_nom.langcode IS \'The language code for this data item.\'');
        $this->addSql('COMMENT ON COLUMN node__field_nom.delta IS \'The sequence number for this data item, used for multi-value fields\'');
        $this->addSql('COMMENT ON COLUMN node__field_nom.bundle IS \'The field instance bundle to which this row belongs, used when deleting a field instance\'');
        $this->addSql('COMMENT ON COLUMN node__field_nom.revision_id IS \'The entity revision id this data is attached to\'');
        $this->addSql('DROP TABLE pole');
    }
}
